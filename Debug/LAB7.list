
LAB7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800462c  0800462c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800462c  0800462c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800462c  0800462c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  080046a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080046a4  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b057  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  0002b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0002cd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  0002da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835b  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca04  00000000  00000000  000469e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b944  00000000  00000000  000533e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ded2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000ded7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800450c 	.word	0x0800450c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800450c 	.word	0x0800450c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcda 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f950 	bl	80003fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f860 	bl	8000220 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f922 	bl	80003a8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000164:	f000 f8aa 	bl	80002bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016a:	f001 fcdb 	bl	8001b24 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&buffer, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	4905      	ldr	r1, [pc, #20]	; (8000188 <main+0x3c>)
 8000172:	4806      	ldr	r0, [pc, #24]	; (800018c <main+0x40>)
 8000174:	f002 fdab 	bl	8002cce <HAL_UART_Receive_IT>
	fsm_cronometro((estados_t*)&estado_actual, -1);
 8000178:	21ff      	movs	r1, #255	; 0xff
 800017a:	4805      	ldr	r0, [pc, #20]	; (8000190 <main+0x44>)
 800017c:	f000 f99a 	bl	80004b4 <fsm_cronometro>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000180:	e7fe      	b.n	8000180 <main+0x34>
 8000182:	bf00      	nop
 8000184:	20000094 	.word	0x20000094
 8000188:	2000008d 	.word	0x2000008d
 800018c:	20000124 	.word	0x20000124
 8000190:	2000008c 	.word	0x2000008c

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f003 fa16 	bl	80035d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 f837 	bl	8001250 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e8:	f000 fa9a 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f001 faa4 	bl	8001754 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000212:	f000 fa85 	bl	8000720 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	; 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000226:	f107 0308 	add.w	r3, r7, #8
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <MX_TIM2_Init+0x98>)
 800023e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000244:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <MX_TIM2_Init+0x98>)
 8000246:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800024a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024c:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <MX_TIM2_Init+0x98>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <MX_TIM2_Init+0x98>)
 8000254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_TIM2_Init+0x98>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_TIM2_Init+0x98>)
 8000262:	2200      	movs	r2, #0
 8000264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000266:	4814      	ldr	r0, [pc, #80]	; (80002b8 <MX_TIM2_Init+0x98>)
 8000268:	f001 fc0c 	bl	8001a84 <HAL_TIM_Base_Init>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000272:	f000 fa55 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800027a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800027c:	f107 0308 	add.w	r3, r7, #8
 8000280:	4619      	mov	r1, r3
 8000282:	480d      	ldr	r0, [pc, #52]	; (80002b8 <MX_TIM2_Init+0x98>)
 8000284:	f002 f850 	bl	8002328 <HAL_TIM_ConfigClockSource>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800028e:	f000 fa47 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800029a:	463b      	mov	r3, r7
 800029c:	4619      	mov	r1, r3
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <MX_TIM2_Init+0x98>)
 80002a0:	f002 fbc6 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002aa:	f000 fa39 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002ae:	bf00      	nop
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000094 	.word	0x20000094

080002bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08e      	sub	sp, #56	; 0x38
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	f107 0320 	add.w	r3, r7, #32
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]
 80002ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ec:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002ee:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <MX_TIM3_Init+0xe8>)
 80002f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80002f2:	4b2b      	ldr	r3, [pc, #172]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <MX_TIM3_Init+0xe4>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80002fe:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000300:	2264      	movs	r2, #100	; 0x64
 8000302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000304:	4b26      	ldr	r3, [pc, #152]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800030a:	4b25      	ldr	r3, [pc, #148]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000310:	4823      	ldr	r0, [pc, #140]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000312:	f001 fbb7 	bl	8001a84 <HAL_TIM_Base_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800031c:	f000 fa00 	bl	8000720 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	4619      	mov	r1, r3
 800032c:	481c      	ldr	r0, [pc, #112]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800032e:	f001 fffb 	bl	8002328 <HAL_TIM_ConfigClockSource>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000338:	f000 f9f2 	bl	8000720 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800033c:	4818      	ldr	r0, [pc, #96]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800033e:	f001 fc43 	bl	8001bc8 <HAL_TIM_PWM_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000348:	f000 f9ea 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034c:	2300      	movs	r3, #0
 800034e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000354:	f107 0320 	add.w	r3, r7, #32
 8000358:	4619      	mov	r1, r3
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <MX_TIM3_Init+0xe4>)
 800035c:	f002 fb68 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000366:	f000 f9db 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800036a:	2360      	movs	r3, #96	; 0x60
 800036c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	2200      	movs	r2, #0
 800037e:	4619      	mov	r1, r3
 8000380:	4807      	ldr	r0, [pc, #28]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000382:	f001 ff13 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800038c:	f000 f9c8 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000390:	4803      	ldr	r0, [pc, #12]	; (80003a0 <MX_TIM3_Init+0xe4>)
 8000392:	f000 fa3d 	bl	8000810 <HAL_TIM_MspPostInit>

}
 8000396:	bf00      	nop
 8000398:	3738      	adds	r7, #56	; 0x38
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000dc 	.word	0x200000dc
 80003a4:	40000400 	.word	0x40000400

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f002 fb96 	bl	8002b10 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ea:	f000 f999 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000124 	.word	0x20000124
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <MX_GPIO_Init+0x40>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0d      	ldr	r2, [pc, #52]	; (800043c <MX_GPIO_Init+0x40>)
 8000408:	f043 0320 	orr.w	r3, r3, #32
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <MX_GPIO_Init+0x40>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0320 	and.w	r3, r3, #32
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <MX_GPIO_Init+0x40>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <MX_GPIO_Init+0x40>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <MX_GPIO_Init+0x40>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0304 	and.w	r3, r3, #4
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000

08000440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	fsm_cronometro((estados_t*)&estado_actual, FSM_100ms);
 8000448:	2102      	movs	r1, #2
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800044c:	f000 f832 	bl	80004b4 <fsm_cronometro>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	2000008c 	.word	0x2000008c

0800045c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	switch (buffer) {
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b73      	cmp	r3, #115	; 0x73
 800046c:	d009      	beq.n	8000482 <HAL_UART_RxCpltCallback+0x26>
 800046e:	2b73      	cmp	r3, #115	; 0x73
 8000470:	dc11      	bgt.n	8000496 <HAL_UART_RxCpltCallback+0x3a>
 8000472:	2b70      	cmp	r3, #112	; 0x70
 8000474:	d00a      	beq.n	800048c <HAL_UART_RxCpltCallback+0x30>
 8000476:	2b70      	cmp	r3, #112	; 0x70
 8000478:	dc0d      	bgt.n	8000496 <HAL_UART_RxCpltCallback+0x3a>
 800047a:	2b50      	cmp	r3, #80	; 0x50
 800047c:	d006      	beq.n	800048c <HAL_UART_RxCpltCallback+0x30>
 800047e:	2b53      	cmp	r3, #83	; 0x53
 8000480:	d109      	bne.n	8000496 <HAL_UART_RxCpltCallback+0x3a>
	case 'S':
	case 's':
	fsm_cronometro((estados_t*)&estado_actual, FSM_START_STOP);
 8000482:	2100      	movs	r1, #0
 8000484:	4809      	ldr	r0, [pc, #36]	; (80004ac <HAL_UART_RxCpltCallback+0x50>)
 8000486:	f000 f815 	bl	80004b4 <fsm_cronometro>
	break;
 800048a:	e004      	b.n	8000496 <HAL_UART_RxCpltCallback+0x3a>
	case 'P':
	case 'p':
	fsm_cronometro((estados_t*)&estado_actual, FSM_PAUSE);
 800048c:	2101      	movs	r1, #1
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <HAL_UART_RxCpltCallback+0x50>)
 8000490:	f000 f810 	bl	80004b4 <fsm_cronometro>
	break;
 8000494:	bf00      	nop
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&buffer, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	4903      	ldr	r1, [pc, #12]	; (80004a8 <HAL_UART_RxCpltCallback+0x4c>)
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_UART_RxCpltCallback+0x54>)
 800049c:	f002 fc17 	bl	8002cce <HAL_UART_Receive_IT>
}
 80004a0:	bf00      	nop
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000008d 	.word	0x2000008d
 80004ac:	2000008c 	.word	0x2000008c
 80004b0:	20000124 	.word	0x20000124

080004b4 <fsm_cronometro>:
void fsm_cronometro(estados_t *actual, eventos_t evento) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	70fb      	strb	r3, [r7, #3]
	static uint8_t h = 0, m = 0, s = 0, ds = 0;
	volatile estados_t anterior = *actual;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	73fb      	strb	r3, [r7, #15]
	switch (anterior) {
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	f200 808b 	bhi.w	80005e6 <fsm_cronometro+0x132>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <fsm_cronometro+0x24>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	080004f1 	.word	0x080004f1
 80004e0:	080004ff 	.word	0x080004ff
 80004e4:	080005b7 	.word	0x080005b7
	case FSM_RESET:
		*actual = FSM_APAGADO;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2201      	movs	r2, #1
 80004ec:	701a      	strb	r2, [r3, #0]
		break;
 80004ee:	e07a      	b.n	80005e6 <fsm_cronometro+0x132>
	case FSM_APAGADO:
		if (evento == FSM_START_STOP)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d172      	bne.n	80005dc <fsm_cronometro+0x128>
			*actual = FSM_CONTANDO;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2202      	movs	r2, #2
 80004fa:	701a      	strb	r2, [r3, #0]
		break;
 80004fc:	e06e      	b.n	80005dc <fsm_cronometro+0x128>
	case FSM_CONTANDO:
		switch (evento) {
 80004fe:	78fb      	ldrb	r3, [r7, #3]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d00e      	beq.n	8000522 <fsm_cronometro+0x6e>
 8000504:	2b02      	cmp	r3, #2
 8000506:	dc6b      	bgt.n	80005e0 <fsm_cronometro+0x12c>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d002      	beq.n	8000512 <fsm_cronometro+0x5e>
 800050c:	2b01      	cmp	r3, #1
 800050e:	d004      	beq.n	800051a <fsm_cronometro+0x66>
				h = 0;
			}
			printf("%02d:%02d:%02d.%d\r\n", h, m, s, ds);
			break;
		}
		break;
 8000510:	e066      	b.n	80005e0 <fsm_cronometro+0x12c>
			*actual = FSM_APAGADO;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
			break;
 8000518:	e04c      	b.n	80005b4 <fsm_cronometro+0x100>
			*actual = FSM_PAUSADO;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2203      	movs	r2, #3
 800051e:	701a      	strb	r2, [r3, #0]
			break;
 8000520:	e048      	b.n	80005b4 <fsm_cronometro+0x100>
			ds++;
 8000522:	4b47      	ldr	r3, [pc, #284]	; (8000640 <fsm_cronometro+0x18c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	3301      	adds	r3, #1
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4b45      	ldr	r3, [pc, #276]	; (8000640 <fsm_cronometro+0x18c>)
 800052c:	701a      	strb	r2, [r3, #0]
			if (ds > 9) {
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <fsm_cronometro+0x18c>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b09      	cmp	r3, #9
 8000534:	d90c      	bls.n	8000550 <fsm_cronometro+0x9c>
				Beep(500);
 8000536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053a:	f000 f8a1 	bl	8000680 <Beep>
				ds = 0;
 800053e:	4b40      	ldr	r3, [pc, #256]	; (8000640 <fsm_cronometro+0x18c>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
				s++;
 8000544:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <fsm_cronometro+0x190>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <fsm_cronometro+0x190>)
 800054e:	701a      	strb	r2, [r3, #0]
			if (s > 59) {
 8000550:	4b3c      	ldr	r3, [pc, #240]	; (8000644 <fsm_cronometro+0x190>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b3b      	cmp	r3, #59	; 0x3b
 8000556:	d908      	bls.n	800056a <fsm_cronometro+0xb6>
				s = 0;
 8000558:	4b3a      	ldr	r3, [pc, #232]	; (8000644 <fsm_cronometro+0x190>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
				m++;
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <fsm_cronometro+0x194>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b38      	ldr	r3, [pc, #224]	; (8000648 <fsm_cronometro+0x194>)
 8000568:	701a      	strb	r2, [r3, #0]
			if (m > 59) {
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <fsm_cronometro+0x194>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b3b      	cmp	r3, #59	; 0x3b
 8000570:	d908      	bls.n	8000584 <fsm_cronometro+0xd0>
				m = 0;
 8000572:	4b35      	ldr	r3, [pc, #212]	; (8000648 <fsm_cronometro+0x194>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
				h++;
 8000578:	4b34      	ldr	r3, [pc, #208]	; (800064c <fsm_cronometro+0x198>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <fsm_cronometro+0x198>)
 8000582:	701a      	strb	r2, [r3, #0]
			if (h > 23) {
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <fsm_cronometro+0x198>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b17      	cmp	r3, #23
 800058a:	d902      	bls.n	8000592 <fsm_cronometro+0xde>
				h = 0;
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <fsm_cronometro+0x198>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
			printf("%02d:%02d:%02d.%d\r\n", h, m, s, ds);
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <fsm_cronometro+0x198>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4619      	mov	r1, r3
 8000598:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <fsm_cronometro+0x194>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b29      	ldr	r3, [pc, #164]	; (8000644 <fsm_cronometro+0x190>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <fsm_cronometro+0x18c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	4603      	mov	r3, r0
 80005ac:	4828      	ldr	r0, [pc, #160]	; (8000650 <fsm_cronometro+0x19c>)
 80005ae:	f003 f819 	bl	80035e4 <iprintf>
			break;
 80005b2:	bf00      	nop
		break;
 80005b4:	e014      	b.n	80005e0 <fsm_cronometro+0x12c>
	case FSM_PAUSADO:
		switch (evento) {
 80005b6:	78fb      	ldrb	r3, [r7, #3]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	d00d      	beq.n	80005d8 <fsm_cronometro+0x124>
 80005bc:	2b02      	cmp	r3, #2
 80005be:	dc11      	bgt.n	80005e4 <fsm_cronometro+0x130>
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d005      	beq.n	80005d0 <fsm_cronometro+0x11c>
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10d      	bne.n	80005e4 <fsm_cronometro+0x130>
		case FSM_100ms:
			break;
		case FSM_PAUSE:
			*actual = FSM_CONTANDO;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2202      	movs	r2, #2
 80005cc:	701a      	strb	r2, [r3, #0]
			break;
 80005ce:	e004      	b.n	80005da <fsm_cronometro+0x126>
		case FSM_START_STOP:
			*actual = FSM_APAGADO;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
			break;
 80005d6:	e000      	b.n	80005da <fsm_cronometro+0x126>
			break;
 80005d8:	bf00      	nop
		}
		break;
 80005da:	e003      	b.n	80005e4 <fsm_cronometro+0x130>
		break;
 80005dc:	bf00      	nop
 80005de:	e002      	b.n	80005e6 <fsm_cronometro+0x132>
		break;
 80005e0:	bf00      	nop
 80005e2:	e000      	b.n	80005e6 <fsm_cronometro+0x132>
		break;
 80005e4:	bf00      	nop
	}
	//acciones tipo Moore
	if (*actual != anterior) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	781a      	ldrb	r2, [r3, #0]
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d022      	beq.n	8000638 <fsm_cronometro+0x184>
		if (*actual == FSM_APAGADO) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d11e      	bne.n	8000638 <fsm_cronometro+0x184>
			h = m = s = ds = 0;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <fsm_cronometro+0x18c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <fsm_cronometro+0x18c>)
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <fsm_cronometro+0x190>)
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <fsm_cronometro+0x190>)
 800060a:	781a      	ldrb	r2, [r3, #0]
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <fsm_cronometro+0x194>)
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <fsm_cronometro+0x194>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <fsm_cronometro+0x198>)
 8000616:	701a      	strb	r2, [r3, #0]
			printf("%02d:%02d:%02d.%d\r\n", h, m, s, ds);
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <fsm_cronometro+0x198>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <fsm_cronometro+0x194>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <fsm_cronometro+0x190>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <fsm_cronometro+0x18c>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4603      	mov	r3, r0
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <fsm_cronometro+0x19c>)
 8000634:	f002 ffd6 	bl	80035e4 <iprintf>
		}
	}
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000168 	.word	0x20000168
 8000644:	20000169 	.word	0x20000169
 8000648:	2000016a 	.word	0x2000016a
 800064c:	2000016b 	.word	0x2000016b
 8000650:	08004524 	.word	0x08004524

08000654 <_write>:
int _write(int file, char *ptr, int len) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len, HAL_MAX_DELAY);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	b29a      	uxth	r2, r3
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	68b9      	ldr	r1, [r7, #8]
 800066a:	4804      	ldr	r0, [pc, #16]	; (800067c <_write+0x28>)
 800066c:	f002 fa9d 	bl	8002baa <HAL_UART_Transmit>
	return len;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000124 	.word	0x20000124

08000680 <Beep>:
//LAB HOY
void Beep(uint16_t ms) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	count_pulses = ms * 80;
 800068a:	88fa      	ldrh	r2, [r7, #6]
 800068c:	4613      	mov	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <Beep+0x2c>)
 8000698:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 800069a:	2100      	movs	r1, #0
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <Beep+0x30>)
 800069e:	f001 faeb 	bl	8001c78 <HAL_TIM_PWM_Start_IT>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	200000dc 	.word	0x200000dc

080006b4 <HAL_TIM_OC_DelayElapsedCallback>:
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = x[i];
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c6:	5c9a      	ldrb	r2, [r3, r2]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
	i++;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	3301      	adds	r3, #1
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80006d8:	801a      	strh	r2, [r3, #0]
	if (i >= NX)
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	2b31      	cmp	r3, #49	; 0x31
 80006e2:	d902      	bls.n	80006ea <HAL_TIM_OC_DelayElapsedCallback+0x36>
		i = 0;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	801a      	strh	r2, [r3, #0]
	count_pulses--;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006f2:	6013      	str	r3, [r2, #0]
	if (count_pulses == 0)
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 80006fc:	2100      	movs	r1, #0
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000700:	f001 fba2 	bl	8001e48 <HAL_TIM_PWM_Stop_IT>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000008e 	.word	0x2000008e
 8000710:	08004548 	.word	0x08004548
 8000714:	40000400 	.word	0x40000400
 8000718:	20000090 	.word	0x20000090
 800071c:	200000dc 	.word	0x200000dc

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	e7fe      	b.n	8000728 <Error_Handler+0x8>
	...

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	; (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a0:	d114      	bne.n	80007cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2107      	movs	r1, #7
 80007be:	201c      	movs	r0, #28
 80007c0:	f000 fadb 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c4:	201c      	movs	r0, #28
 80007c6:	f000 faf4 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007ca:	e018      	b.n	80007fe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_TIM_Base_MspInit+0x7c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d113      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_Base_MspInit+0x78>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2105      	movs	r1, #5
 80007f2:	201d      	movs	r0, #29
 80007f4:	f000 fac1 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007f8:	201d      	movs	r0, #29
 80007fa:	f000 fada 	bl	8000db2 <HAL_NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40000400 	.word	0x40000400

08000810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_TIM_MspPostInit+0x58>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d117      	bne.n	8000860 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_TIM_MspPostInit+0x5c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <HAL_TIM_MspPostInit+0x5c>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_TIM_MspPostInit+0x5c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <HAL_TIM_MspPostInit+0x60>)
 800085c:	f000 fb74 	bl	8000f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40000400 	.word	0x40000400
 800086c:	40021000 	.word	0x40021000
 8000870:	40010800 	.word	0x40010800

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <HAL_UART_MspInit+0x9c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d139      	bne.n	8000908 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_UART_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_UART_MspInit+0xa0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008da:	f000 fb35 	bl	8000f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008f4:	f000 fb28 	bl	8000f48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2107      	movs	r1, #7
 80008fc:	2025      	movs	r0, #37	; 0x25
 80008fe:	f000 fa3c 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000902:	2025      	movs	r0, #37	; 0x25
 8000904:	f000 fa55 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000962:	f000 f917 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000970:	4802      	ldr	r0, [pc, #8]	; (800097c <TIM2_IRQHandler+0x10>)
 8000972:	f001 fb13 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000094 	.word	0x20000094

08000980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <TIM3_IRQHandler+0x10>)
 8000986:	f001 fb09 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000dc 	.word	0x200000dc

08000994 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USART1_IRQHandler+0x10>)
 800099a:	f002 f9c9 	bl	8002d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000124 	.word	0x20000124

080009a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
	}

return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a08:	605a      	str	r2, [r3, #4]
	return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	60f8      	str	r0, [r7, #12]
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f002 fd84 	bl	8003580 <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20005000 	.word	0x20005000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	2000016c 	.word	0x2000016c
 8000aac:	20000188 	.word	0x20000188

08000ab0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ae2:	f7ff ffe5 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fd51 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff fb2f 	bl	800014c <main>
  bx lr
 8000aee:	4770      	bx	lr
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af8:	08004634 	.word	0x08004634
  ldr r2, =_sbss
 8000afc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b00:	20000184 	.word	0x20000184

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x28>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x28>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f923 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe02 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40022000 	.word	0x40022000

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f93b 	bl	8000dce <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f903 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000170 	.word	0x20000170

08000bb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <HAL_GetTick+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000170 	.word	0x20000170

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4906      	ldr	r1, [pc, #24]	; (8000c64 <__NVIC_EnableIRQ+0x34>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff90 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff2d 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff42 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff35 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e020      	b.n	8000e50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 020e 	bic.w	r2, r2, #14
 8000e1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0201 	bic.w	r2, r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
	...

08000e5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d005      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2204      	movs	r2, #4
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e051      	b.n	8000f22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 020e 	bic.w	r2, r2, #14
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0201 	bic.w	r2, r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <HAL_DMA_Abort_IT+0xd0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d029      	beq.n	8000efc <HAL_DMA_Abort_IT+0xa0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_DMA_Abort_IT+0xd4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d022      	beq.n	8000ef8 <HAL_DMA_Abort_IT+0x9c>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_DMA_Abort_IT+0xd8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d01a      	beq.n	8000ef2 <HAL_DMA_Abort_IT+0x96>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <HAL_DMA_Abort_IT+0xdc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d012      	beq.n	8000eec <HAL_DMA_Abort_IT+0x90>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <HAL_DMA_Abort_IT+0xe0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00a      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0x8a>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1a      	ldr	r2, [pc, #104]	; (8000f40 <HAL_DMA_Abort_IT+0xe4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d102      	bne.n	8000ee0 <HAL_DMA_Abort_IT+0x84>
 8000eda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ede:	e00e      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ee4:	e00b      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eea:	e008      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	e005      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef6:	e002      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000ef8:	2310      	movs	r3, #16
 8000efa:	e000      	b.n	8000efe <HAL_DMA_Abort_IT+0xa2>
 8000efc:	2301      	movs	r3, #1
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <HAL_DMA_Abort_IT+0xe8>)
 8000f00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
    } 
  }
  return status;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020008 	.word	0x40020008
 8000f30:	4002001c 	.word	0x4002001c
 8000f34:	40020030 	.word	0x40020030
 8000f38:	40020044 	.word	0x40020044
 8000f3c:	40020058 	.word	0x40020058
 8000f40:	4002006c 	.word	0x4002006c
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b08b      	sub	sp, #44	; 0x2c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e169      	b.n	8001230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	69fa      	ldr	r2, [r7, #28]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	f040 8158 	bne.w	800122a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4a9a      	ldr	r2, [pc, #616]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d05e      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f84:	4a98      	ldr	r2, [pc, #608]	; (80011e8 <HAL_GPIO_Init+0x2a0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d875      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f8a:	4a98      	ldr	r2, [pc, #608]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d058      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f90:	4a96      	ldr	r2, [pc, #600]	; (80011ec <HAL_GPIO_Init+0x2a4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d86f      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000f96:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d052      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a94      	ldr	r2, [pc, #592]	; (80011f0 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d869      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a94      	ldr	r2, [pc, #592]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d04c      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a92      	ldr	r2, [pc, #584]	; (80011f4 <HAL_GPIO_Init+0x2ac>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d863      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fae:	4a92      	ldr	r2, [pc, #584]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d046      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a90      	ldr	r2, [pc, #576]	; (80011f8 <HAL_GPIO_Init+0x2b0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d85d      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d82a      	bhi.n	8001014 <HAL_GPIO_Init+0xcc>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d859      	bhi.n	8001076 <HAL_GPIO_Init+0x12e>
 8000fc2:	a201      	add	r2, pc, #4	; (adr r2, 8000fc8 <HAL_GPIO_Init+0x80>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08001043 	.word	0x08001043
 8000fcc:	0800101d 	.word	0x0800101d
 8000fd0:	0800102f 	.word	0x0800102f
 8000fd4:	08001071 	.word	0x08001071
 8000fd8:	08001077 	.word	0x08001077
 8000fdc:	08001077 	.word	0x08001077
 8000fe0:	08001077 	.word	0x08001077
 8000fe4:	08001077 	.word	0x08001077
 8000fe8:	08001077 	.word	0x08001077
 8000fec:	08001077 	.word	0x08001077
 8000ff0:	08001077 	.word	0x08001077
 8000ff4:	08001077 	.word	0x08001077
 8000ff8:	08001077 	.word	0x08001077
 8000ffc:	08001077 	.word	0x08001077
 8001000:	08001077 	.word	0x08001077
 8001004:	08001077 	.word	0x08001077
 8001008:	08001077 	.word	0x08001077
 800100c:	08001025 	.word	0x08001025
 8001010:	08001039 	.word	0x08001039
 8001014:	4a79      	ldr	r2, [pc, #484]	; (80011fc <HAL_GPIO_Init+0x2b4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e029      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e024      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01f      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e01a      	b.n	8001078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e013      	b.n	8001078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e009      	b.n	8001078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e003      	b.n	8001078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x130>
          break;
 8001076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d801      	bhi.n	8001082 <HAL_GPIO_Init+0x13a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	e001      	b.n	8001086 <HAL_GPIO_Init+0x13e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d802      	bhi.n	8001094 <HAL_GPIO_Init+0x14c>
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	e002      	b.n	800109a <HAL_GPIO_Init+0x152>
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	3b08      	subs	r3, #8
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	210f      	movs	r1, #15
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	6a39      	ldr	r1, [r7, #32]
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	431a      	orrs	r2, r3
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80b1 	beq.w	800122a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c8:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b4a      	ldr	r3, [pc, #296]	; (8001200 <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a40      	ldr	r2, [pc, #256]	; (8001208 <HAL_GPIO_Init+0x2c0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d013      	beq.n	8001134 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a3f      	ldr	r2, [pc, #252]	; (800120c <HAL_GPIO_Init+0x2c4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00d      	beq.n	8001130 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a3e      	ldr	r2, [pc, #248]	; (8001210 <HAL_GPIO_Init+0x2c8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d007      	beq.n	800112c <HAL_GPIO_Init+0x1e4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3d      	ldr	r2, [pc, #244]	; (8001214 <HAL_GPIO_Init+0x2cc>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d101      	bne.n	8001128 <HAL_GPIO_Init+0x1e0>
 8001124:	2303      	movs	r3, #3
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001128:	2304      	movs	r3, #4
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 800112c:	2302      	movs	r3, #2
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1ee>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	492f      	ldr	r1, [pc, #188]	; (8001204 <HAL_GPIO_Init+0x2bc>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001160:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	492c      	ldr	r1, [pc, #176]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4928      	ldr	r1, [pc, #160]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001178:	4013      	ands	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	491e      	ldr	r1, [pc, #120]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	4918      	ldr	r1, [pc, #96]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4914      	ldr	r1, [pc, #80]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d021      	beq.n	800121c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
 80011e4:	e021      	b.n	800122a <HAL_GPIO_Init+0x2e2>
 80011e6:	bf00      	nop
 80011e8:	10320000 	.word	0x10320000
 80011ec:	10310000 	.word	0x10310000
 80011f0:	10220000 	.word	0x10220000
 80011f4:	10210000 	.word	0x10210000
 80011f8:	10120000 	.word	0x10120000
 80011fc:	10110000 	.word	0x10110000
 8001200:	40021000 	.word	0x40021000
 8001204:	40010000 	.word	0x40010000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00
 8001210:	40011000 	.word	0x40011000
 8001214:	40011400 	.word	0x40011400
 8001218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_GPIO_Init+0x304>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <HAL_GPIO_Init+0x304>)
 8001226:	4013      	ands	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	3301      	adds	r3, #1
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f ae8e 	bne.w	8000f5c <HAL_GPIO_Init+0x14>
  }
}
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	372c      	adds	r7, #44	; 0x2c
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40010400 	.word	0x40010400

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e272      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
 8001288:	4b8c      	ldr	r3, [pc, #560]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b89      	ldr	r3, [pc, #548]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x12c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e24c      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x76>
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7a      	ldr	r2, [pc, #488]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a77      	ldr	r2, [pc, #476]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xbc>
 80012f2:	4b72      	ldr	r3, [pc, #456]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a71      	ldr	r2, [pc, #452]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6a      	ldr	r2, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b68      	ldr	r3, [pc, #416]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a67      	ldr	r2, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc44 	bl	8000bb8 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc40 	bl	8000bb8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e200      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe4>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc30 	bl	8000bb8 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fc2c 	bl	8000bb8 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1ec      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x10c>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c0      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4939      	ldr	r1, [pc, #228]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fbe5 	bl	8000bb8 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fbe1 	bl	8000bb8 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4927      	ldr	r1, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fbc4 	bl	8000bb8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fbc0 	bl	8000bb8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e180      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fba4 	bl	8000bb8 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fba0 	bl	8000bb8 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e160      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fad8 	bl	8001a48 <RCC_Delay>
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fb8a 	bl	8000bb8 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb86 	bl	8000bb8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d908      	bls.n	80014c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e146      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420000 	.word	0x42420000
 80014c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b92      	ldr	r3, [pc, #584]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a6 	beq.w	800162e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a87      	ldr	r2, [pc, #540]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b82      	ldr	r3, [pc, #520]	; (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x4c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7e      	ldr	r2, [pc, #504]	; (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb47 	bl	8000bb8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fb43 	bl	8000bb8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e103      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x4c8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001554:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x334>
 800156a:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a69      	ldr	r2, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a66      	ldr	r2, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x356>
 800158c:	4b61      	ldr	r3, [pc, #388]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a60      	ldr	r2, [pc, #384]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b5e      	ldr	r3, [pc, #376]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a5d      	ldr	r2, [pc, #372]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 80015a6:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a5a      	ldr	r2, [pc, #360]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b58      	ldr	r3, [pc, #352]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a57      	ldr	r2, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff faf7 	bl	8000bb8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff faf3 	bl	8000bb8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0b1      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x37e>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fae1 	bl	8000bb8 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fadd 	bl	8000bb8 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e09b      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8087 	beq.w	8001746 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d061      	beq.n	8001708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_RCC_OscConfig+0x4cc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fab1 	bl	8000bb8 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff faad 	bl	8000bb8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e06d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4921      	ldr	r1, [pc, #132]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a19      	ldr	r1, [r3, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	491b      	ldr	r1, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fa81 	bl	8000bb8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fa7d 	bl	8000bb8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03d      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
 80016d8:	e035      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fa6a 	bl	8000bb8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fa66 	bl	8000bb8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e026      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x498>
 8001706:	e01e      	b.n	8001746 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e019      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
 8001714:	40021000 	.word	0x40021000
 8001718:	40007000 	.word	0x40007000
 800171c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_RCC_OscConfig+0x500>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	429a      	cmp	r2, r3
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000

08001754 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0d0      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d910      	bls.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 0207 	bic.w	r2, r3, #7
 800177e:	4965      	ldr	r1, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d040      	beq.n	8001874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d115      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e073      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06b      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f023 0203 	bic.w	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	4936      	ldr	r1, [pc, #216]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7ff f9b8 	bl	8000bb8 <HAL_GetTick>
 8001848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	e00a      	b.n	8001862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f9b4 	bl	8000bb8 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e053      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 020c 	and.w	r2, r3, #12
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	429a      	cmp	r2, r3
 8001872:	d1eb      	bne.n	800184c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001874:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d210      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 0207 	bic.w	r2, r3, #7
 800188a:	4922      	ldr	r1, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	490a      	ldr	r1, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c8>)
 80018f4:	5ccb      	ldrb	r3, [r1, r3]
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1cc>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1d0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f916 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000
 8001918:	40021000 	.word	0x40021000
 800191c:	0800457c 	.word	0x0800457c
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b490      	push	{r4, r7}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800192e:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001930:	1d3c      	adds	r4, r7, #4
 8001932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001938:	f240 2301 	movw	r3, #513	; 0x201
 800193c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x40>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x46>
 8001966:	e02b      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800196a:	623b      	str	r3, [r7, #32]
      break;
 800196c:	e02b      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3328      	adds	r3, #40	; 0x28
 8001978:	443b      	add	r3, r7
 800197a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800197e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d012      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0c5b      	lsrs	r3, r3, #17
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	3328      	adds	r3, #40	; 0x28
 8001996:	443b      	add	r3, r7
 8001998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80019a2:	fb03 f202 	mul.w	r2, r3, r2
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e004      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	623b      	str	r3, [r7, #32]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c2:	623b      	str	r3, [r7, #32]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc90      	pop	{r4, r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	08004538 	.word	0x08004538
 80019d8:	40021000 	.word	0x40021000
 80019dc:	007a1200 	.word	0x007a1200
 80019e0:	003d0900 	.word	0x003d0900

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	0800458c 	.word	0x0800458c

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	0800458c 	.word	0x0800458c

08001a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <RCC_Delay+0x34>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <RCC_Delay+0x38>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a64:	bf00      	nop
  }
  while (Delay --);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <RCC_Delay+0x1c>
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e041      	b.n	8001b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7fe fe70 	bl	8000790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	f000 fd10 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d001      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e03a      	b.n	8001bb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a18      	ldr	r2, [pc, #96]	; (8001bbc <HAL_TIM_Base_Start_IT+0x98>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00e      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x58>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b66:	d009      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x58>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d004      	beq.n	8001b7c <HAL_TIM_Base_Start_IT+0x58>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d010      	beq.n	8001bb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9e:	e007      	b.n	8001bb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800

08001bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e041      	b.n	8001c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f839 	bl	8001c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f000 fc6e 	bl	80024e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_TIM_PWM_Start_IT+0x24>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e022      	b.n	8001ce2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d109      	bne.n	8001cb6 <HAL_TIM_PWM_Start_IT+0x3e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	e015      	b.n	8001ce2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d109      	bne.n	8001cd0 <HAL_TIM_PWM_Start_IT+0x58>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e008      	b.n	8001ce2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e0a4      	b.n	8001e34 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d104      	bne.n	8001cfa <HAL_TIM_PWM_Start_IT+0x82>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf8:	e013      	b.n	8001d22 <HAL_TIM_PWM_Start_IT+0xaa>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_PWM_Start_IT+0x92>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d08:	e00b      	b.n	8001d22 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_PWM_Start_IT+0xa2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	e003      	b.n	8001d22 <HAL_TIM_PWM_Start_IT+0xaa>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b0c      	cmp	r3, #12
 8001d26:	d841      	bhi.n	8001dac <HAL_TIM_PWM_Start_IT+0x134>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_TIM_PWM_Start_IT+0xb8>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d65 	.word	0x08001d65
 8001d34:	08001dad 	.word	0x08001dad
 8001d38:	08001dad 	.word	0x08001dad
 8001d3c:	08001dad 	.word	0x08001dad
 8001d40:	08001d77 	.word	0x08001d77
 8001d44:	08001dad 	.word	0x08001dad
 8001d48:	08001dad 	.word	0x08001dad
 8001d4c:	08001dad 	.word	0x08001dad
 8001d50:	08001d89 	.word	0x08001d89
 8001d54:	08001dad 	.word	0x08001dad
 8001d58:	08001dad 	.word	0x08001dad
 8001d5c:	08001dad 	.word	0x08001dad
 8001d60:	08001d9b 	.word	0x08001d9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0202 	orr.w	r2, r2, #2
 8001d72:	60da      	str	r2, [r3, #12]
      break;
 8001d74:	e01b      	b.n	8001dae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0204 	orr.w	r2, r2, #4
 8001d84:	60da      	str	r2, [r3, #12]
      break;
 8001d86:	e012      	b.n	8001dae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	60da      	str	r2, [r3, #12]
      break;
 8001d98:	e009      	b.n	8001dae <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0210 	orr.w	r2, r2, #16
 8001da8:	60da      	str	r2, [r3, #12]
      break;
 8001daa:	e000      	b.n	8001dae <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8001dac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fe16 	bl	80029e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00e      	beq.n	8001dfe <HAL_TIM_PWM_Start_IT+0x186>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d009      	beq.n	8001dfe <HAL_TIM_PWM_Start_IT+0x186>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_PWM_Start_IT+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d111      	bne.n	8001e22 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d010      	beq.n	8001e32 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e20:	e007      	b.n	8001e32 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40012c00 	.word	0x40012c00
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d841      	bhi.n	8001edc <HAL_TIM_PWM_Stop_IT+0x94>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <HAL_TIM_PWM_Stop_IT+0x18>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e95 	.word	0x08001e95
 8001e64:	08001edd 	.word	0x08001edd
 8001e68:	08001edd 	.word	0x08001edd
 8001e6c:	08001edd 	.word	0x08001edd
 8001e70:	08001ea7 	.word	0x08001ea7
 8001e74:	08001edd 	.word	0x08001edd
 8001e78:	08001edd 	.word	0x08001edd
 8001e7c:	08001edd 	.word	0x08001edd
 8001e80:	08001eb9 	.word	0x08001eb9
 8001e84:	08001edd 	.word	0x08001edd
 8001e88:	08001edd 	.word	0x08001edd
 8001e8c:	08001edd 	.word	0x08001edd
 8001e90:	08001ecb 	.word	0x08001ecb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0202 	bic.w	r2, r2, #2
 8001ea2:	60da      	str	r2, [r3, #12]
      break;
 8001ea4:	e01b      	b.n	8001ede <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0204 	bic.w	r2, r2, #4
 8001eb4:	60da      	str	r2, [r3, #12]
      break;
 8001eb6:	e012      	b.n	8001ede <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0208 	bic.w	r2, r2, #8
 8001ec6:	60da      	str	r2, [r3, #12]
      break;
 8001ec8:	e009      	b.n	8001ede <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0210 	bic.w	r2, r2, #16
 8001ed8:	60da      	str	r2, [r3, #12]
      break;
 8001eda:	e000      	b.n	8001ede <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8001edc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fd7e 	bl	80029e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_TIM_PWM_Stop_IT+0x150>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d117      	bne.n	8001f26 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a1a      	ldr	r2, [r3, #32]
 8001efc:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10f      	bne.n	8001f26 <HAL_TIM_PWM_Stop_IT+0xde>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6a1a      	ldr	r2, [r3, #32]
 8001f0c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_TIM_PWM_Stop_IT+0xde>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10f      	bne.n	8001f56 <HAL_TIM_PWM_Stop_IT+0x10e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6a1a      	ldr	r2, [r3, #32]
 8001f3c:	f240 4344 	movw	r3, #1092	; 0x444
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d107      	bne.n	8001f56 <HAL_TIM_PWM_Stop_IT+0x10e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_PWM_Stop_IT+0x11e>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f64:	e013      	b.n	8001f8e <HAL_TIM_PWM_Stop_IT+0x146>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_PWM_Stop_IT+0x12e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_PWM_Stop_IT+0x146>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_PWM_Stop_IT+0x13e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_PWM_Stop_IT+0x146>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40012c00 	.word	0x40012c00

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa66 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fb64 	bl	80006b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fa68 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa3c 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fb3a 	bl	80006b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fa3e 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa12 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fb10 	bl	80006b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fa14 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f9e8 	bl	80024b0 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7fe fae6 	bl	80006b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f9ea 	bl	80024c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe f990 	bl	8000440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fcd9 	bl	8002afe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9ae 	bl	80024d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0220 	mvn.w	r2, #32
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fca4 	bl	8002aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0ac      	b.n	8002320 <HAL_TIM_PWM_ConfigChannel+0x174>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	f200 809f 	bhi.w	8002314 <HAL_TIM_PWM_ConfigChannel+0x168>
 80021d6:	a201      	add	r2, pc, #4	; (adr r2, 80021dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80021d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021dc:	08002211 	.word	0x08002211
 80021e0:	08002315 	.word	0x08002315
 80021e4:	08002315 	.word	0x08002315
 80021e8:	08002315 	.word	0x08002315
 80021ec:	08002251 	.word	0x08002251
 80021f0:	08002315 	.word	0x08002315
 80021f4:	08002315 	.word	0x08002315
 80021f8:	08002315 	.word	0x08002315
 80021fc:	08002293 	.word	0x08002293
 8002200:	08002315 	.word	0x08002315
 8002204:	08002315 	.word	0x08002315
 8002208:	08002315 	.word	0x08002315
 800220c:	080022d3 	.word	0x080022d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f9c8 	bl	80025ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6999      	ldr	r1, [r3, #24]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	619a      	str	r2, [r3, #24]
      break;
 800224e:	e062      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fa0e 	bl	8002678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6999      	ldr	r1, [r3, #24]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	021a      	lsls	r2, r3, #8
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	619a      	str	r2, [r3, #24]
      break;
 8002290:	e041      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fa57 	bl	800274c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0208 	orr.w	r2, r2, #8
 80022ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0204 	bic.w	r2, r2, #4
 80022bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69d9      	ldr	r1, [r3, #28]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	61da      	str	r2, [r3, #28]
      break;
 80022d0:	e021      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 faa1 	bl	8002820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69d9      	ldr	r1, [r3, #28]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	021a      	lsls	r2, r3, #8
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	61da      	str	r2, [r3, #28]
      break;
 8002312:	e000      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_TIM_ConfigClockSource+0x18>
 800233c:	2302      	movs	r3, #2
 800233e:	e0b3      	b.n	80024a8 <HAL_TIM_ConfigClockSource+0x180>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800235e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002366:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002378:	d03e      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0xd0>
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237e:	f200 8087 	bhi.w	8002490 <HAL_TIM_ConfigClockSource+0x168>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	f000 8085 	beq.w	8002494 <HAL_TIM_ConfigClockSource+0x16c>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d87f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d01a      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0xa2>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d87b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b60      	cmp	r3, #96	; 0x60
 800239a:	d050      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x116>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d877      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b50      	cmp	r3, #80	; 0x50
 80023a2:	d03c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xf6>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d873      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d058      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x136>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d86f      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 80023b0:	2b30      	cmp	r3, #48	; 0x30
 80023b2:	d064      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x156>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d86b      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d060      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x156>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d867      	bhi.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05c      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x156>
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d05a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023c8:	e062      	b.n	8002490 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f000 fae6 	bl	80029aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	609a      	str	r2, [r3, #8]
      break;
 80023f6:	e04e      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6899      	ldr	r1, [r3, #8]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f000 facf 	bl	80029aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800241a:	609a      	str	r2, [r3, #8]
      break;
 800241c:	e03b      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	f000 fa46 	bl	80028bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2150      	movs	r1, #80	; 0x50
 8002436:	4618      	mov	r0, r3
 8002438:	f000 fa9d 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800243c:	e02b      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	f000 fa64 	bl	8002918 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2160      	movs	r1, #96	; 0x60
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa8d 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800245c:	e01b      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	461a      	mov	r2, r3
 800246c:	f000 fa26 	bl	80028bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2140      	movs	r1, #64	; 0x40
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fa7d 	bl	8002976 <TIM_ITRx_SetConfig>
      break;
 800247c:	e00b      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f000 fa74 	bl	8002976 <TIM_ITRx_SetConfig>
        break;
 800248e:	e002      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002490:	bf00      	nop
 8002492:	e000      	b.n	8002496 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
	...

080024e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00b      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002506:	d007      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d003      	beq.n	8002518 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d108      	bne.n	800252a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d007      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <TIM_Base_SetConfig+0xbc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <TIM_Base_SetConfig+0xc0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d108      	bne.n	800255c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <TIM_Base_SetConfig+0xb8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d103      	bne.n	8002590 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	615a      	str	r2, [r3, #20]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800

080025ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0201 	bic.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f023 0302 	bic.w	r3, r3, #2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10c      	bne.n	8002622 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0308 	bic.w	r3, r3, #8
 800260e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a13      	ldr	r2, [pc, #76]	; (8002674 <TIM_OC1_SetConfig+0xc8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40012c00 	.word	0x40012c00

08002678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0210 	bic.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0320 	bic.w	r3, r3, #32
 80026c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <TIM_OC2_SetConfig+0xd0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10d      	bne.n	80026f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <TIM_OC2_SetConfig+0xd0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d113      	bne.n	8002724 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800270a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40012c00 	.word	0x40012c00

0800274c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <TIM_OC3_SetConfig+0xd0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <TIM_OC3_SetConfig+0xd0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d113      	bne.n	80027f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	621a      	str	r2, [r3, #32]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00

08002820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800286a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <TIM_OC4_SetConfig+0x98>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d109      	bne.n	8002894 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00

080028bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f023 0201 	bic.w	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f023 030a 	bic.w	r3, r3, #10
 80028f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	621a      	str	r2, [r3, #32]
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	f023 0210 	bic.w	r2, r3, #16
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002942:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	031b      	lsls	r3, r3, #12
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002954:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 0307 	orr.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b087      	sub	sp, #28
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2201      	movs	r2, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a1a      	ldr	r2, [r3, #32]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e046      	b.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d009      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e03f      	b.n	8002ba2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd fe9c 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	; 0x24
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fc85 	bl	8003464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b08a      	sub	sp, #40	; 0x28
 8002bae:	af02      	add	r7, sp, #8
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d17c      	bne.n	8002cc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Transmit+0x2c>
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e075      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_UART_Transmit+0x3e>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e06e      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2221      	movs	r2, #33	; 0x21
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfe:	f7fd ffdb 	bl	8000bb8 <HAL_GetTick>
 8002c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	88fa      	ldrh	r2, [r7, #6]
 8002c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c18:	d108      	bne.n	8002c2c <HAL_UART_Transmit+0x82>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d104      	bne.n	8002c2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e003      	b.n	8002c34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c3c:	e02a      	b.n	8002c94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fa38 	bl	80030be <UART_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e036      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3302      	adds	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	e007      	b.n	8002c86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1cf      	bne.n	8002c3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2140      	movs	r1, #64	; 0x40
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fa08 	bl	80030be <UART_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d11d      	bne.n	8002d24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_UART_Receive_IT+0x26>
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e016      	b.n	8002d26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Receive_IT+0x38>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e00f      	b.n	8002d26 <HAL_UART_Receive_IT+0x58>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa19 	bl	8003152 <UART_Start_Receive_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_UART_IRQHandler+0x52>
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fac9 	bl	8003312 <UART_Receive_IT>
      return;
 8002d80:	e17b      	b.n	800307a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b1 	beq.w	8002eec <HAL_UART_IRQHandler+0x1bc>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d105      	bne.n	8002da0 <HAL_UART_IRQHandler+0x70>
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80a6 	beq.w	8002eec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x90>
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_UART_IRQHandler+0xb0>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_UART_IRQHandler+0xd0>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00f      	beq.n	8002e2a <HAL_UART_IRQHandler+0xfa>
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d104      	bne.n	8002e1e <HAL_UART_IRQHandler+0xee>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0208 	orr.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 811e 	beq.w	8003070 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_UART_IRQHandler+0x11e>
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa62 	bl	8003312 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf14      	ite	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	2300      	moveq	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <HAL_UART_IRQHandler+0x146>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d031      	beq.n	8002eda <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9a4 	bl	80031c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d023      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d013      	beq.n	8002eca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a76      	ldr	r2, [pc, #472]	; (8003080 <HAL_UART_IRQHandler+0x350>)
 8002ea8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd ffd4 	bl	8000e5c <HAL_DMA_Abort_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec8:	e00e      	b.n	8002ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8e3 	bl	8003096 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed0:	e00a      	b.n	8002ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8df 	bl	8003096 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e006      	b.n	8002ee8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8db 	bl	8003096 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ee6:	e0c3      	b.n	8003070 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	bf00      	nop
    return;
 8002eea:	e0c1      	b.n	8003070 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 80a1 	bne.w	8003038 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 809b 	beq.w	8003038 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8095 	beq.w	8003038 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04e      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f3c:	8a3b      	ldrh	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8098 	beq.w	8003074 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f48:	8a3a      	ldrh	r2, [r7, #16]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	f080 8092 	bcs.w	8003074 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8a3a      	ldrh	r2, [r7, #16]
 8002f54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d02b      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0210 	bic.w	r2, r2, #16
 8002fac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ff17 	bl	8000de6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f86d 	bl	80030a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fce:	e051      	b.n	8003074 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d047      	beq.n	8003078 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002fe8:	8a7b      	ldrh	r3, [r7, #18]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d044      	beq.n	8003078 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ffc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695a      	ldr	r2, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0210 	bic.w	r2, r2, #16
 800302a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800302c:	8a7b      	ldrh	r3, [r7, #18]
 800302e:	4619      	mov	r1, r3
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f839 	bl	80030a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003036:	e01f      	b.n	8003078 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_UART_IRQHandler+0x324>
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f8f9 	bl	8003244 <UART_Transmit_IT>
    return;
 8003052:	e012      	b.n	800307a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <HAL_UART_IRQHandler+0x34a>
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f93a 	bl	80032e2 <UART_EndTransmit_IT>
    return;
 800306e:	e004      	b.n	800307a <HAL_UART_IRQHandler+0x34a>
    return;
 8003070:	bf00      	nop
 8003072:	e002      	b.n	800307a <HAL_UART_IRQHandler+0x34a>
      return;
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <HAL_UART_IRQHandler+0x34a>
      return;
 8003078:	bf00      	nop
  }
}
 800307a:	3728      	adds	r7, #40	; 0x28
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	0800321d 	.word	0x0800321d

08003084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	603b      	str	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ce:	e02c      	b.n	800312a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d6:	d028      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x30>
 80030de:	f7fd fd6b 	bl	8000bb8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d21d      	bcs.n	800312a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00f      	b.n	800314a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	429a      	cmp	r2, r3
 8003146:	d0c3      	beq.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	4613      	mov	r3, r2
 800315e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2222      	movs	r2, #34	; 0x22
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003196:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0220 	orr.w	r2, r2, #32
 80031b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0210 	bic.w	r2, r2, #16
 8003202:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff2d 	bl	8003096 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b21      	cmp	r3, #33	; 0x21
 8003256:	d13e      	bne.n	80032d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003260:	d114      	bne.n	800328c <UART_Transmit_IT+0x48>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d110      	bne.n	800328c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]
 800328a:	e008      	b.n	800329e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	1c59      	adds	r1, r3, #1
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6211      	str	r1, [r2, #32]
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4619      	mov	r1, r3
 80032ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff febe 	bl	8003084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b22      	cmp	r3, #34	; 0x22
 8003324:	f040 8099 	bne.w	800345a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d117      	bne.n	8003362 <UART_Receive_IT+0x50>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d113      	bne.n	8003362 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003350:	b29a      	uxth	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
 8003360:	e026      	b.n	80033b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d007      	beq.n	8003386 <UART_Receive_IT+0x74>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10a      	bne.n	8003394 <UART_Receive_IT+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	e008      	b.n	80033a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4619      	mov	r1, r3
 80033be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d148      	bne.n	8003456 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0220 	bic.w	r2, r2, #32
 80033d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b01      	cmp	r3, #1
 8003402:	d123      	bne.n	800344c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0210 	bic.w	r2, r2, #16
 8003418:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b10      	cmp	r3, #16
 8003426:	d10a      	bne.n	800343e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fe2f 	bl	80030a8 <HAL_UARTEx_RxEventCallback>
 800344a:	e002      	b.n	8003452 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd f805 	bl	800045c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e002      	b.n	800345c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800349e:	f023 030c 	bic.w	r3, r3, #12
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2c      	ldr	r2, [pc, #176]	; (8003578 <UART_SetConfig+0x114>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe faa8 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	e002      	b.n	80034da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7fe fa90 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 80034d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009a      	lsls	r2, r3, #2
 80034e4:	441a      	add	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <UART_SetConfig+0x118>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	0119      	lsls	r1, r3, #4
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003510:	4b1a      	ldr	r3, [pc, #104]	; (800357c <UART_SetConfig+0x118>)
 8003512:	fba3 0302 	umull	r0, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2064      	movs	r0, #100	; 0x64
 800351a:	fb00 f303 	mul.w	r3, r0, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a15      	ldr	r2, [pc, #84]	; (800357c <UART_SetConfig+0x118>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003530:	4419      	add	r1, r3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f2f3 	udiv	r2, r2, r3
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <UART_SetConfig+0x118>)
 800354a:	fba3 0302 	umull	r0, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2064      	movs	r0, #100	; 0x64
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	3332      	adds	r3, #50	; 0x32
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <UART_SetConfig+0x118>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	440a      	add	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40013800 	.word	0x40013800
 800357c:	51eb851f 	.word	0x51eb851f

08003580 <__errno>:
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <__errno+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2000000c 	.word	0x2000000c

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	2600      	movs	r6, #0
 8003590:	4d0c      	ldr	r5, [pc, #48]	; (80035c4 <__libc_init_array+0x38>)
 8003592:	4c0d      	ldr	r4, [pc, #52]	; (80035c8 <__libc_init_array+0x3c>)
 8003594:	1b64      	subs	r4, r4, r5
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	f000 ffb6 	bl	800450c <_init>
 80035a0:	2600      	movs	r6, #0
 80035a2:	4d0a      	ldr	r5, [pc, #40]	; (80035cc <__libc_init_array+0x40>)
 80035a4:	4c0a      	ldr	r4, [pc, #40]	; (80035d0 <__libc_init_array+0x44>)
 80035a6:	1b64      	subs	r4, r4, r5
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	0800462c 	.word	0x0800462c
 80035c8:	0800462c 	.word	0x0800462c
 80035cc:	0800462c 	.word	0x0800462c
 80035d0:	08004630 	.word	0x08004630

080035d4 <memset>:
 80035d4:	4603      	mov	r3, r0
 80035d6:	4402      	add	r2, r0
 80035d8:	4293      	cmp	r3, r2
 80035da:	d100      	bne.n	80035de <memset+0xa>
 80035dc:	4770      	bx	lr
 80035de:	f803 1b01 	strb.w	r1, [r3], #1
 80035e2:	e7f9      	b.n	80035d8 <memset+0x4>

080035e4 <iprintf>:
 80035e4:	b40f      	push	{r0, r1, r2, r3}
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <iprintf+0x2c>)
 80035e8:	b513      	push	{r0, r1, r4, lr}
 80035ea:	681c      	ldr	r4, [r3, #0]
 80035ec:	b124      	cbz	r4, 80035f8 <iprintf+0x14>
 80035ee:	69a3      	ldr	r3, [r4, #24]
 80035f0:	b913      	cbnz	r3, 80035f8 <iprintf+0x14>
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 f866 	bl	80036c4 <__sinit>
 80035f8:	ab05      	add	r3, sp, #20
 80035fa:	4620      	mov	r0, r4
 80035fc:	9a04      	ldr	r2, [sp, #16]
 80035fe:	68a1      	ldr	r1, [r4, #8]
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	f000 f9bb 	bl	800397c <_vfiprintf_r>
 8003606:	b002      	add	sp, #8
 8003608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800360c:	b004      	add	sp, #16
 800360e:	4770      	bx	lr
 8003610:	2000000c 	.word	0x2000000c

08003614 <std>:
 8003614:	2300      	movs	r3, #0
 8003616:	b510      	push	{r4, lr}
 8003618:	4604      	mov	r4, r0
 800361a:	e9c0 3300 	strd	r3, r3, [r0]
 800361e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003622:	6083      	str	r3, [r0, #8]
 8003624:	8181      	strh	r1, [r0, #12]
 8003626:	6643      	str	r3, [r0, #100]	; 0x64
 8003628:	81c2      	strh	r2, [r0, #14]
 800362a:	6183      	str	r3, [r0, #24]
 800362c:	4619      	mov	r1, r3
 800362e:	2208      	movs	r2, #8
 8003630:	305c      	adds	r0, #92	; 0x5c
 8003632:	f7ff ffcf 	bl	80035d4 <memset>
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <std+0x38>)
 8003638:	6224      	str	r4, [r4, #32]
 800363a:	6263      	str	r3, [r4, #36]	; 0x24
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <std+0x3c>)
 800363e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <std+0x40>)
 8003642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <std+0x44>)
 8003646:	6323      	str	r3, [r4, #48]	; 0x30
 8003648:	bd10      	pop	{r4, pc}
 800364a:	bf00      	nop
 800364c:	08003f29 	.word	0x08003f29
 8003650:	08003f4b 	.word	0x08003f4b
 8003654:	08003f83 	.word	0x08003f83
 8003658:	08003fa7 	.word	0x08003fa7

0800365c <_cleanup_r>:
 800365c:	4901      	ldr	r1, [pc, #4]	; (8003664 <_cleanup_r+0x8>)
 800365e:	f000 b8af 	b.w	80037c0 <_fwalk_reent>
 8003662:	bf00      	nop
 8003664:	08004279 	.word	0x08004279

08003668 <__sfmoreglue>:
 8003668:	2268      	movs	r2, #104	; 0x68
 800366a:	b570      	push	{r4, r5, r6, lr}
 800366c:	1e4d      	subs	r5, r1, #1
 800366e:	4355      	muls	r5, r2
 8003670:	460e      	mov	r6, r1
 8003672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003676:	f000 f8e5 	bl	8003844 <_malloc_r>
 800367a:	4604      	mov	r4, r0
 800367c:	b140      	cbz	r0, 8003690 <__sfmoreglue+0x28>
 800367e:	2100      	movs	r1, #0
 8003680:	e9c0 1600 	strd	r1, r6, [r0]
 8003684:	300c      	adds	r0, #12
 8003686:	60a0      	str	r0, [r4, #8]
 8003688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800368c:	f7ff ffa2 	bl	80035d4 <memset>
 8003690:	4620      	mov	r0, r4
 8003692:	bd70      	pop	{r4, r5, r6, pc}

08003694 <__sfp_lock_acquire>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__sfp_lock_acquire+0x8>)
 8003696:	f000 b8b3 	b.w	8003800 <__retarget_lock_acquire_recursive>
 800369a:	bf00      	nop
 800369c:	20000175 	.word	0x20000175

080036a0 <__sfp_lock_release>:
 80036a0:	4801      	ldr	r0, [pc, #4]	; (80036a8 <__sfp_lock_release+0x8>)
 80036a2:	f000 b8ae 	b.w	8003802 <__retarget_lock_release_recursive>
 80036a6:	bf00      	nop
 80036a8:	20000175 	.word	0x20000175

080036ac <__sinit_lock_acquire>:
 80036ac:	4801      	ldr	r0, [pc, #4]	; (80036b4 <__sinit_lock_acquire+0x8>)
 80036ae:	f000 b8a7 	b.w	8003800 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000176 	.word	0x20000176

080036b8 <__sinit_lock_release>:
 80036b8:	4801      	ldr	r0, [pc, #4]	; (80036c0 <__sinit_lock_release+0x8>)
 80036ba:	f000 b8a2 	b.w	8003802 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	20000176 	.word	0x20000176

080036c4 <__sinit>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	f7ff fff0 	bl	80036ac <__sinit_lock_acquire>
 80036cc:	69a3      	ldr	r3, [r4, #24]
 80036ce:	b11b      	cbz	r3, 80036d8 <__sinit+0x14>
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	f7ff bff0 	b.w	80036b8 <__sinit_lock_release>
 80036d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036dc:	6523      	str	r3, [r4, #80]	; 0x50
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <__sinit+0x68>)
 80036e0:	4a13      	ldr	r2, [pc, #76]	; (8003730 <__sinit+0x6c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80036e6:	42a3      	cmp	r3, r4
 80036e8:	bf08      	it	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	4620      	mov	r0, r4
 80036ee:	bf08      	it	eq
 80036f0:	61a3      	streq	r3, [r4, #24]
 80036f2:	f000 f81f 	bl	8003734 <__sfp>
 80036f6:	6060      	str	r0, [r4, #4]
 80036f8:	4620      	mov	r0, r4
 80036fa:	f000 f81b 	bl	8003734 <__sfp>
 80036fe:	60a0      	str	r0, [r4, #8]
 8003700:	4620      	mov	r0, r4
 8003702:	f000 f817 	bl	8003734 <__sfp>
 8003706:	2200      	movs	r2, #0
 8003708:	2104      	movs	r1, #4
 800370a:	60e0      	str	r0, [r4, #12]
 800370c:	6860      	ldr	r0, [r4, #4]
 800370e:	f7ff ff81 	bl	8003614 <std>
 8003712:	2201      	movs	r2, #1
 8003714:	2109      	movs	r1, #9
 8003716:	68a0      	ldr	r0, [r4, #8]
 8003718:	f7ff ff7c 	bl	8003614 <std>
 800371c:	2202      	movs	r2, #2
 800371e:	2112      	movs	r1, #18
 8003720:	68e0      	ldr	r0, [r4, #12]
 8003722:	f7ff ff77 	bl	8003614 <std>
 8003726:	2301      	movs	r3, #1
 8003728:	61a3      	str	r3, [r4, #24]
 800372a:	e7d1      	b.n	80036d0 <__sinit+0xc>
 800372c:	08004594 	.word	0x08004594
 8003730:	0800365d 	.word	0x0800365d

08003734 <__sfp>:
 8003734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003736:	4607      	mov	r7, r0
 8003738:	f7ff ffac 	bl	8003694 <__sfp_lock_acquire>
 800373c:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <__sfp+0x84>)
 800373e:	681e      	ldr	r6, [r3, #0]
 8003740:	69b3      	ldr	r3, [r6, #24]
 8003742:	b913      	cbnz	r3, 800374a <__sfp+0x16>
 8003744:	4630      	mov	r0, r6
 8003746:	f7ff ffbd 	bl	80036c4 <__sinit>
 800374a:	3648      	adds	r6, #72	; 0x48
 800374c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003750:	3b01      	subs	r3, #1
 8003752:	d503      	bpl.n	800375c <__sfp+0x28>
 8003754:	6833      	ldr	r3, [r6, #0]
 8003756:	b30b      	cbz	r3, 800379c <__sfp+0x68>
 8003758:	6836      	ldr	r6, [r6, #0]
 800375a:	e7f7      	b.n	800374c <__sfp+0x18>
 800375c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003760:	b9d5      	cbnz	r5, 8003798 <__sfp+0x64>
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <__sfp+0x88>)
 8003764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003768:	60e3      	str	r3, [r4, #12]
 800376a:	6665      	str	r5, [r4, #100]	; 0x64
 800376c:	f000 f847 	bl	80037fe <__retarget_lock_init_recursive>
 8003770:	f7ff ff96 	bl	80036a0 <__sfp_lock_release>
 8003774:	2208      	movs	r2, #8
 8003776:	4629      	mov	r1, r5
 8003778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800377c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003780:	6025      	str	r5, [r4, #0]
 8003782:	61a5      	str	r5, [r4, #24]
 8003784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003788:	f7ff ff24 	bl	80035d4 <memset>
 800378c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003794:	4620      	mov	r0, r4
 8003796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003798:	3468      	adds	r4, #104	; 0x68
 800379a:	e7d9      	b.n	8003750 <__sfp+0x1c>
 800379c:	2104      	movs	r1, #4
 800379e:	4638      	mov	r0, r7
 80037a0:	f7ff ff62 	bl	8003668 <__sfmoreglue>
 80037a4:	4604      	mov	r4, r0
 80037a6:	6030      	str	r0, [r6, #0]
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d1d5      	bne.n	8003758 <__sfp+0x24>
 80037ac:	f7ff ff78 	bl	80036a0 <__sfp_lock_release>
 80037b0:	230c      	movs	r3, #12
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	e7ee      	b.n	8003794 <__sfp+0x60>
 80037b6:	bf00      	nop
 80037b8:	08004594 	.word	0x08004594
 80037bc:	ffff0001 	.word	0xffff0001

080037c0 <_fwalk_reent>:
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	4606      	mov	r6, r0
 80037c6:	4688      	mov	r8, r1
 80037c8:	2700      	movs	r7, #0
 80037ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037d2:	f1b9 0901 	subs.w	r9, r9, #1
 80037d6:	d505      	bpl.n	80037e4 <_fwalk_reent+0x24>
 80037d8:	6824      	ldr	r4, [r4, #0]
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d1f7      	bne.n	80037ce <_fwalk_reent+0xe>
 80037de:	4638      	mov	r0, r7
 80037e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e4:	89ab      	ldrh	r3, [r5, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d907      	bls.n	80037fa <_fwalk_reent+0x3a>
 80037ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ee:	3301      	adds	r3, #1
 80037f0:	d003      	beq.n	80037fa <_fwalk_reent+0x3a>
 80037f2:	4629      	mov	r1, r5
 80037f4:	4630      	mov	r0, r6
 80037f6:	47c0      	blx	r8
 80037f8:	4307      	orrs	r7, r0
 80037fa:	3568      	adds	r5, #104	; 0x68
 80037fc:	e7e9      	b.n	80037d2 <_fwalk_reent+0x12>

080037fe <__retarget_lock_init_recursive>:
 80037fe:	4770      	bx	lr

08003800 <__retarget_lock_acquire_recursive>:
 8003800:	4770      	bx	lr

08003802 <__retarget_lock_release_recursive>:
 8003802:	4770      	bx	lr

08003804 <sbrk_aligned>:
 8003804:	b570      	push	{r4, r5, r6, lr}
 8003806:	4e0e      	ldr	r6, [pc, #56]	; (8003840 <sbrk_aligned+0x3c>)
 8003808:	460c      	mov	r4, r1
 800380a:	6831      	ldr	r1, [r6, #0]
 800380c:	4605      	mov	r5, r0
 800380e:	b911      	cbnz	r1, 8003816 <sbrk_aligned+0x12>
 8003810:	f000 fb7a 	bl	8003f08 <_sbrk_r>
 8003814:	6030      	str	r0, [r6, #0]
 8003816:	4621      	mov	r1, r4
 8003818:	4628      	mov	r0, r5
 800381a:	f000 fb75 	bl	8003f08 <_sbrk_r>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d00a      	beq.n	8003838 <sbrk_aligned+0x34>
 8003822:	1cc4      	adds	r4, r0, #3
 8003824:	f024 0403 	bic.w	r4, r4, #3
 8003828:	42a0      	cmp	r0, r4
 800382a:	d007      	beq.n	800383c <sbrk_aligned+0x38>
 800382c:	1a21      	subs	r1, r4, r0
 800382e:	4628      	mov	r0, r5
 8003830:	f000 fb6a 	bl	8003f08 <_sbrk_r>
 8003834:	3001      	adds	r0, #1
 8003836:	d101      	bne.n	800383c <sbrk_aligned+0x38>
 8003838:	f04f 34ff 	mov.w	r4, #4294967295
 800383c:	4620      	mov	r0, r4
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	2000017c 	.word	0x2000017c

08003844 <_malloc_r>:
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	1ccd      	adds	r5, r1, #3
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	2d00      	cmp	r5, #0
 8003858:	4607      	mov	r7, r0
 800385a:	db01      	blt.n	8003860 <_malloc_r+0x1c>
 800385c:	42a9      	cmp	r1, r5
 800385e:	d905      	bls.n	800386c <_malloc_r+0x28>
 8003860:	230c      	movs	r3, #12
 8003862:	2600      	movs	r6, #0
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4630      	mov	r0, r6
 8003868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800386c:	4e2e      	ldr	r6, [pc, #184]	; (8003928 <_malloc_r+0xe4>)
 800386e:	f000 fdc5 	bl	80043fc <__malloc_lock>
 8003872:	6833      	ldr	r3, [r6, #0]
 8003874:	461c      	mov	r4, r3
 8003876:	bb34      	cbnz	r4, 80038c6 <_malloc_r+0x82>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	f7ff ffc2 	bl	8003804 <sbrk_aligned>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	4604      	mov	r4, r0
 8003884:	d14d      	bne.n	8003922 <_malloc_r+0xde>
 8003886:	6834      	ldr	r4, [r6, #0]
 8003888:	4626      	mov	r6, r4
 800388a:	2e00      	cmp	r6, #0
 800388c:	d140      	bne.n	8003910 <_malloc_r+0xcc>
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	4631      	mov	r1, r6
 8003892:	4638      	mov	r0, r7
 8003894:	eb04 0803 	add.w	r8, r4, r3
 8003898:	f000 fb36 	bl	8003f08 <_sbrk_r>
 800389c:	4580      	cmp	r8, r0
 800389e:	d13a      	bne.n	8003916 <_malloc_r+0xd2>
 80038a0:	6821      	ldr	r1, [r4, #0]
 80038a2:	3503      	adds	r5, #3
 80038a4:	1a6d      	subs	r5, r5, r1
 80038a6:	f025 0503 	bic.w	r5, r5, #3
 80038aa:	3508      	adds	r5, #8
 80038ac:	2d0c      	cmp	r5, #12
 80038ae:	bf38      	it	cc
 80038b0:	250c      	movcc	r5, #12
 80038b2:	4638      	mov	r0, r7
 80038b4:	4629      	mov	r1, r5
 80038b6:	f7ff ffa5 	bl	8003804 <sbrk_aligned>
 80038ba:	3001      	adds	r0, #1
 80038bc:	d02b      	beq.n	8003916 <_malloc_r+0xd2>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	442b      	add	r3, r5
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	e00e      	b.n	80038e4 <_malloc_r+0xa0>
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	1b52      	subs	r2, r2, r5
 80038ca:	d41e      	bmi.n	800390a <_malloc_r+0xc6>
 80038cc:	2a0b      	cmp	r2, #11
 80038ce:	d916      	bls.n	80038fe <_malloc_r+0xba>
 80038d0:	1961      	adds	r1, r4, r5
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	6025      	str	r5, [r4, #0]
 80038d6:	bf18      	it	ne
 80038d8:	6059      	strne	r1, [r3, #4]
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	bf08      	it	eq
 80038de:	6031      	streq	r1, [r6, #0]
 80038e0:	5162      	str	r2, [r4, r5]
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	4638      	mov	r0, r7
 80038e6:	f104 060b 	add.w	r6, r4, #11
 80038ea:	f000 fd8d 	bl	8004408 <__malloc_unlock>
 80038ee:	f026 0607 	bic.w	r6, r6, #7
 80038f2:	1d23      	adds	r3, r4, #4
 80038f4:	1af2      	subs	r2, r6, r3
 80038f6:	d0b6      	beq.n	8003866 <_malloc_r+0x22>
 80038f8:	1b9b      	subs	r3, r3, r6
 80038fa:	50a3      	str	r3, [r4, r2]
 80038fc:	e7b3      	b.n	8003866 <_malloc_r+0x22>
 80038fe:	6862      	ldr	r2, [r4, #4]
 8003900:	42a3      	cmp	r3, r4
 8003902:	bf0c      	ite	eq
 8003904:	6032      	streq	r2, [r6, #0]
 8003906:	605a      	strne	r2, [r3, #4]
 8003908:	e7ec      	b.n	80038e4 <_malloc_r+0xa0>
 800390a:	4623      	mov	r3, r4
 800390c:	6864      	ldr	r4, [r4, #4]
 800390e:	e7b2      	b.n	8003876 <_malloc_r+0x32>
 8003910:	4634      	mov	r4, r6
 8003912:	6876      	ldr	r6, [r6, #4]
 8003914:	e7b9      	b.n	800388a <_malloc_r+0x46>
 8003916:	230c      	movs	r3, #12
 8003918:	4638      	mov	r0, r7
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	f000 fd74 	bl	8004408 <__malloc_unlock>
 8003920:	e7a1      	b.n	8003866 <_malloc_r+0x22>
 8003922:	6025      	str	r5, [r4, #0]
 8003924:	e7de      	b.n	80038e4 <_malloc_r+0xa0>
 8003926:	bf00      	nop
 8003928:	20000178 	.word	0x20000178

0800392c <__sfputc_r>:
 800392c:	6893      	ldr	r3, [r2, #8]
 800392e:	b410      	push	{r4}
 8003930:	3b01      	subs	r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	6093      	str	r3, [r2, #8]
 8003936:	da07      	bge.n	8003948 <__sfputc_r+0x1c>
 8003938:	6994      	ldr	r4, [r2, #24]
 800393a:	42a3      	cmp	r3, r4
 800393c:	db01      	blt.n	8003942 <__sfputc_r+0x16>
 800393e:	290a      	cmp	r1, #10
 8003940:	d102      	bne.n	8003948 <__sfputc_r+0x1c>
 8003942:	bc10      	pop	{r4}
 8003944:	f000 bb34 	b.w	8003fb0 <__swbuf_r>
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	1c58      	adds	r0, r3, #1
 800394c:	6010      	str	r0, [r2, #0]
 800394e:	7019      	strb	r1, [r3, #0]
 8003950:	4608      	mov	r0, r1
 8003952:	bc10      	pop	{r4}
 8003954:	4770      	bx	lr

08003956 <__sfputs_r>:
 8003956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003958:	4606      	mov	r6, r0
 800395a:	460f      	mov	r7, r1
 800395c:	4614      	mov	r4, r2
 800395e:	18d5      	adds	r5, r2, r3
 8003960:	42ac      	cmp	r4, r5
 8003962:	d101      	bne.n	8003968 <__sfputs_r+0x12>
 8003964:	2000      	movs	r0, #0
 8003966:	e007      	b.n	8003978 <__sfputs_r+0x22>
 8003968:	463a      	mov	r2, r7
 800396a:	4630      	mov	r0, r6
 800396c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003970:	f7ff ffdc 	bl	800392c <__sfputc_r>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d1f3      	bne.n	8003960 <__sfputs_r+0xa>
 8003978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800397c <_vfiprintf_r>:
 800397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003980:	460d      	mov	r5, r1
 8003982:	4614      	mov	r4, r2
 8003984:	4698      	mov	r8, r3
 8003986:	4606      	mov	r6, r0
 8003988:	b09d      	sub	sp, #116	; 0x74
 800398a:	b118      	cbz	r0, 8003994 <_vfiprintf_r+0x18>
 800398c:	6983      	ldr	r3, [r0, #24]
 800398e:	b90b      	cbnz	r3, 8003994 <_vfiprintf_r+0x18>
 8003990:	f7ff fe98 	bl	80036c4 <__sinit>
 8003994:	4b89      	ldr	r3, [pc, #548]	; (8003bbc <_vfiprintf_r+0x240>)
 8003996:	429d      	cmp	r5, r3
 8003998:	d11b      	bne.n	80039d2 <_vfiprintf_r+0x56>
 800399a:	6875      	ldr	r5, [r6, #4]
 800399c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800399e:	07d9      	lsls	r1, r3, #31
 80039a0:	d405      	bmi.n	80039ae <_vfiprintf_r+0x32>
 80039a2:	89ab      	ldrh	r3, [r5, #12]
 80039a4:	059a      	lsls	r2, r3, #22
 80039a6:	d402      	bmi.n	80039ae <_vfiprintf_r+0x32>
 80039a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039aa:	f7ff ff29 	bl	8003800 <__retarget_lock_acquire_recursive>
 80039ae:	89ab      	ldrh	r3, [r5, #12]
 80039b0:	071b      	lsls	r3, r3, #28
 80039b2:	d501      	bpl.n	80039b8 <_vfiprintf_r+0x3c>
 80039b4:	692b      	ldr	r3, [r5, #16]
 80039b6:	b9eb      	cbnz	r3, 80039f4 <_vfiprintf_r+0x78>
 80039b8:	4629      	mov	r1, r5
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 fb5c 	bl	8004078 <__swsetup_r>
 80039c0:	b1c0      	cbz	r0, 80039f4 <_vfiprintf_r+0x78>
 80039c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039c4:	07dc      	lsls	r4, r3, #31
 80039c6:	d50e      	bpl.n	80039e6 <_vfiprintf_r+0x6a>
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	b01d      	add	sp, #116	; 0x74
 80039ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d2:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <_vfiprintf_r+0x244>)
 80039d4:	429d      	cmp	r5, r3
 80039d6:	d101      	bne.n	80039dc <_vfiprintf_r+0x60>
 80039d8:	68b5      	ldr	r5, [r6, #8]
 80039da:	e7df      	b.n	800399c <_vfiprintf_r+0x20>
 80039dc:	4b79      	ldr	r3, [pc, #484]	; (8003bc4 <_vfiprintf_r+0x248>)
 80039de:	429d      	cmp	r5, r3
 80039e0:	bf08      	it	eq
 80039e2:	68f5      	ldreq	r5, [r6, #12]
 80039e4:	e7da      	b.n	800399c <_vfiprintf_r+0x20>
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	0598      	lsls	r0, r3, #22
 80039ea:	d4ed      	bmi.n	80039c8 <_vfiprintf_r+0x4c>
 80039ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ee:	f7ff ff08 	bl	8003802 <__retarget_lock_release_recursive>
 80039f2:	e7e9      	b.n	80039c8 <_vfiprintf_r+0x4c>
 80039f4:	2300      	movs	r3, #0
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	2320      	movs	r3, #32
 80039fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	f04f 0901 	mov.w	r9, #1
 8003a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003bc8 <_vfiprintf_r+0x24c>
 8003a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a10:	4623      	mov	r3, r4
 8003a12:	469a      	mov	sl, r3
 8003a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a18:	b10a      	cbz	r2, 8003a1e <_vfiprintf_r+0xa2>
 8003a1a:	2a25      	cmp	r2, #37	; 0x25
 8003a1c:	d1f9      	bne.n	8003a12 <_vfiprintf_r+0x96>
 8003a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a22:	d00b      	beq.n	8003a3c <_vfiprintf_r+0xc0>
 8003a24:	465b      	mov	r3, fp
 8003a26:	4622      	mov	r2, r4
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f7ff ff93 	bl	8003956 <__sfputs_r>
 8003a30:	3001      	adds	r0, #1
 8003a32:	f000 80aa 	beq.w	8003b8a <_vfiprintf_r+0x20e>
 8003a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a38:	445a      	add	r2, fp
 8003a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80a2 	beq.w	8003b8a <_vfiprintf_r+0x20e>
 8003a46:	2300      	movs	r3, #0
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a50:	f10a 0a01 	add.w	sl, sl, #1
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	9307      	str	r3, [sp, #28]
 8003a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a5e:	4654      	mov	r4, sl
 8003a60:	2205      	movs	r2, #5
 8003a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a66:	4858      	ldr	r0, [pc, #352]	; (8003bc8 <_vfiprintf_r+0x24c>)
 8003a68:	f000 fcba 	bl	80043e0 <memchr>
 8003a6c:	9a04      	ldr	r2, [sp, #16]
 8003a6e:	b9d8      	cbnz	r0, 8003aa8 <_vfiprintf_r+0x12c>
 8003a70:	06d1      	lsls	r1, r2, #27
 8003a72:	bf44      	itt	mi
 8003a74:	2320      	movmi	r3, #32
 8003a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a7a:	0713      	lsls	r3, r2, #28
 8003a7c:	bf44      	itt	mi
 8003a7e:	232b      	movmi	r3, #43	; 0x2b
 8003a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a84:	f89a 3000 	ldrb.w	r3, [sl]
 8003a88:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8a:	d015      	beq.n	8003ab8 <_vfiprintf_r+0x13c>
 8003a8c:	4654      	mov	r4, sl
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f04f 0c0a 	mov.w	ip, #10
 8003a94:	9a07      	ldr	r2, [sp, #28]
 8003a96:	4621      	mov	r1, r4
 8003a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a9c:	3b30      	subs	r3, #48	; 0x30
 8003a9e:	2b09      	cmp	r3, #9
 8003aa0:	d94e      	bls.n	8003b40 <_vfiprintf_r+0x1c4>
 8003aa2:	b1b0      	cbz	r0, 8003ad2 <_vfiprintf_r+0x156>
 8003aa4:	9207      	str	r2, [sp, #28]
 8003aa6:	e014      	b.n	8003ad2 <_vfiprintf_r+0x156>
 8003aa8:	eba0 0308 	sub.w	r3, r0, r8
 8003aac:	fa09 f303 	lsl.w	r3, r9, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	46a2      	mov	sl, r4
 8003ab4:	9304      	str	r3, [sp, #16]
 8003ab6:	e7d2      	b.n	8003a5e <_vfiprintf_r+0xe2>
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	1d19      	adds	r1, r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	9103      	str	r1, [sp, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bfbb      	ittet	lt
 8003ac4:	425b      	neglt	r3, r3
 8003ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8003aca:	9307      	strge	r3, [sp, #28]
 8003acc:	9307      	strlt	r3, [sp, #28]
 8003ace:	bfb8      	it	lt
 8003ad0:	9204      	strlt	r2, [sp, #16]
 8003ad2:	7823      	ldrb	r3, [r4, #0]
 8003ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad6:	d10c      	bne.n	8003af2 <_vfiprintf_r+0x176>
 8003ad8:	7863      	ldrb	r3, [r4, #1]
 8003ada:	2b2a      	cmp	r3, #42	; 0x2a
 8003adc:	d135      	bne.n	8003b4a <_vfiprintf_r+0x1ce>
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	3402      	adds	r4, #2
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	9203      	str	r2, [sp, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bfb8      	it	lt
 8003aec:	f04f 33ff 	movlt.w	r3, #4294967295
 8003af0:	9305      	str	r3, [sp, #20]
 8003af2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003bcc <_vfiprintf_r+0x250>
 8003af6:	2203      	movs	r2, #3
 8003af8:	4650      	mov	r0, sl
 8003afa:	7821      	ldrb	r1, [r4, #0]
 8003afc:	f000 fc70 	bl	80043e0 <memchr>
 8003b00:	b140      	cbz	r0, 8003b14 <_vfiprintf_r+0x198>
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	eba0 000a 	sub.w	r0, r0, sl
 8003b08:	fa03 f000 	lsl.w	r0, r3, r0
 8003b0c:	9b04      	ldr	r3, [sp, #16]
 8003b0e:	3401      	adds	r4, #1
 8003b10:	4303      	orrs	r3, r0
 8003b12:	9304      	str	r3, [sp, #16]
 8003b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b18:	2206      	movs	r2, #6
 8003b1a:	482d      	ldr	r0, [pc, #180]	; (8003bd0 <_vfiprintf_r+0x254>)
 8003b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b20:	f000 fc5e 	bl	80043e0 <memchr>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d03f      	beq.n	8003ba8 <_vfiprintf_r+0x22c>
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <_vfiprintf_r+0x258>)
 8003b2a:	bb1b      	cbnz	r3, 8003b74 <_vfiprintf_r+0x1f8>
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	3307      	adds	r3, #7
 8003b30:	f023 0307 	bic.w	r3, r3, #7
 8003b34:	3308      	adds	r3, #8
 8003b36:	9303      	str	r3, [sp, #12]
 8003b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3a:	443b      	add	r3, r7
 8003b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b3e:	e767      	b.n	8003a10 <_vfiprintf_r+0x94>
 8003b40:	460c      	mov	r4, r1
 8003b42:	2001      	movs	r0, #1
 8003b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b48:	e7a5      	b.n	8003a96 <_vfiprintf_r+0x11a>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f04f 0c0a 	mov.w	ip, #10
 8003b50:	4619      	mov	r1, r3
 8003b52:	3401      	adds	r4, #1
 8003b54:	9305      	str	r3, [sp, #20]
 8003b56:	4620      	mov	r0, r4
 8003b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b5c:	3a30      	subs	r2, #48	; 0x30
 8003b5e:	2a09      	cmp	r2, #9
 8003b60:	d903      	bls.n	8003b6a <_vfiprintf_r+0x1ee>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0c5      	beq.n	8003af2 <_vfiprintf_r+0x176>
 8003b66:	9105      	str	r1, [sp, #20]
 8003b68:	e7c3      	b.n	8003af2 <_vfiprintf_r+0x176>
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b72:	e7f0      	b.n	8003b56 <_vfiprintf_r+0x1da>
 8003b74:	ab03      	add	r3, sp, #12
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <_vfiprintf_r+0x25c>)
 8003b7e:	a904      	add	r1, sp, #16
 8003b80:	f3af 8000 	nop.w
 8003b84:	4607      	mov	r7, r0
 8003b86:	1c78      	adds	r0, r7, #1
 8003b88:	d1d6      	bne.n	8003b38 <_vfiprintf_r+0x1bc>
 8003b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b8c:	07d9      	lsls	r1, r3, #31
 8003b8e:	d405      	bmi.n	8003b9c <_vfiprintf_r+0x220>
 8003b90:	89ab      	ldrh	r3, [r5, #12]
 8003b92:	059a      	lsls	r2, r3, #22
 8003b94:	d402      	bmi.n	8003b9c <_vfiprintf_r+0x220>
 8003b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b98:	f7ff fe33 	bl	8003802 <__retarget_lock_release_recursive>
 8003b9c:	89ab      	ldrh	r3, [r5, #12]
 8003b9e:	065b      	lsls	r3, r3, #25
 8003ba0:	f53f af12 	bmi.w	80039c8 <_vfiprintf_r+0x4c>
 8003ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ba6:	e711      	b.n	80039cc <_vfiprintf_r+0x50>
 8003ba8:	ab03      	add	r3, sp, #12
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	462a      	mov	r2, r5
 8003bae:	4630      	mov	r0, r6
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <_vfiprintf_r+0x25c>)
 8003bb2:	a904      	add	r1, sp, #16
 8003bb4:	f000 f882 	bl	8003cbc <_printf_i>
 8003bb8:	e7e4      	b.n	8003b84 <_vfiprintf_r+0x208>
 8003bba:	bf00      	nop
 8003bbc:	080045b8 	.word	0x080045b8
 8003bc0:	080045d8 	.word	0x080045d8
 8003bc4:	08004598 	.word	0x08004598
 8003bc8:	080045f8 	.word	0x080045f8
 8003bcc:	080045fe 	.word	0x080045fe
 8003bd0:	08004602 	.word	0x08004602
 8003bd4:	00000000 	.word	0x00000000
 8003bd8:	08003957 	.word	0x08003957

08003bdc <_printf_common>:
 8003bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be0:	4616      	mov	r6, r2
 8003be2:	4699      	mov	r9, r3
 8003be4:	688a      	ldr	r2, [r1, #8]
 8003be6:	690b      	ldr	r3, [r1, #16]
 8003be8:	4607      	mov	r7, r0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfb8      	it	lt
 8003bee:	4613      	movlt	r3, r2
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bfc:	b10a      	cbz	r2, 8003c02 <_printf_common+0x26>
 8003bfe:	3301      	adds	r3, #1
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	0699      	lsls	r1, r3, #26
 8003c06:	bf42      	ittt	mi
 8003c08:	6833      	ldrmi	r3, [r6, #0]
 8003c0a:	3302      	addmi	r3, #2
 8003c0c:	6033      	strmi	r3, [r6, #0]
 8003c0e:	6825      	ldr	r5, [r4, #0]
 8003c10:	f015 0506 	ands.w	r5, r5, #6
 8003c14:	d106      	bne.n	8003c24 <_printf_common+0x48>
 8003c16:	f104 0a19 	add.w	sl, r4, #25
 8003c1a:	68e3      	ldr	r3, [r4, #12]
 8003c1c:	6832      	ldr	r2, [r6, #0]
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	42ab      	cmp	r3, r5
 8003c22:	dc28      	bgt.n	8003c76 <_printf_common+0x9a>
 8003c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c28:	1e13      	subs	r3, r2, #0
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	bf18      	it	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	0692      	lsls	r2, r2, #26
 8003c32:	d42d      	bmi.n	8003c90 <_printf_common+0xb4>
 8003c34:	4649      	mov	r1, r9
 8003c36:	4638      	mov	r0, r7
 8003c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c3c:	47c0      	blx	r8
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d020      	beq.n	8003c84 <_printf_common+0xa8>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	68e5      	ldr	r5, [r4, #12]
 8003c46:	f003 0306 	and.w	r3, r3, #6
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	bf18      	it	ne
 8003c4e:	2500      	movne	r5, #0
 8003c50:	6832      	ldr	r2, [r6, #0]
 8003c52:	f04f 0600 	mov.w	r6, #0
 8003c56:	68a3      	ldr	r3, [r4, #8]
 8003c58:	bf08      	it	eq
 8003c5a:	1aad      	subeq	r5, r5, r2
 8003c5c:	6922      	ldr	r2, [r4, #16]
 8003c5e:	bf08      	it	eq
 8003c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bfc4      	itt	gt
 8003c68:	1a9b      	subgt	r3, r3, r2
 8003c6a:	18ed      	addgt	r5, r5, r3
 8003c6c:	341a      	adds	r4, #26
 8003c6e:	42b5      	cmp	r5, r6
 8003c70:	d11a      	bne.n	8003ca8 <_printf_common+0xcc>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e008      	b.n	8003c88 <_printf_common+0xac>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4652      	mov	r2, sl
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	47c0      	blx	r8
 8003c80:	3001      	adds	r0, #1
 8003c82:	d103      	bne.n	8003c8c <_printf_common+0xb0>
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	3501      	adds	r5, #1
 8003c8e:	e7c4      	b.n	8003c1a <_printf_common+0x3e>
 8003c90:	2030      	movs	r0, #48	; 0x30
 8003c92:	18e1      	adds	r1, r4, r3
 8003c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c9e:	4422      	add	r2, r4
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ca6:	e7c5      	b.n	8003c34 <_printf_common+0x58>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4622      	mov	r2, r4
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d0e6      	beq.n	8003c84 <_printf_common+0xa8>
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7d9      	b.n	8003c6e <_printf_common+0x92>
	...

08003cbc <_printf_i>:
 8003cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	7e0f      	ldrb	r7, [r1, #24]
 8003cc2:	4691      	mov	r9, r2
 8003cc4:	2f78      	cmp	r7, #120	; 0x78
 8003cc6:	4680      	mov	r8, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	469a      	mov	sl, r3
 8003ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cd2:	d807      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cd4:	2f62      	cmp	r7, #98	; 0x62
 8003cd6:	d80a      	bhi.n	8003cee <_printf_i+0x32>
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	f000 80d9 	beq.w	8003e90 <_printf_i+0x1d4>
 8003cde:	2f58      	cmp	r7, #88	; 0x58
 8003ce0:	f000 80a4 	beq.w	8003e2c <_printf_i+0x170>
 8003ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cec:	e03a      	b.n	8003d64 <_printf_i+0xa8>
 8003cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cf2:	2b15      	cmp	r3, #21
 8003cf4:	d8f6      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cf6:	a101      	add	r1, pc, #4	; (adr r1, 8003cfc <_printf_i+0x40>)
 8003cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003ce5 	.word	0x08003ce5
 8003d08:	08003ce5 	.word	0x08003ce5
 8003d0c:	08003ce5 	.word	0x08003ce5
 8003d10:	08003ce5 	.word	0x08003ce5
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003ce5 	.word	0x08003ce5
 8003d1c:	08003ce5 	.word	0x08003ce5
 8003d20:	08003ce5 	.word	0x08003ce5
 8003d24:	08003ce5 	.word	0x08003ce5
 8003d28:	08003e77 	.word	0x08003e77
 8003d2c:	08003d99 	.word	0x08003d99
 8003d30:	08003e59 	.word	0x08003e59
 8003d34:	08003ce5 	.word	0x08003ce5
 8003d38:	08003ce5 	.word	0x08003ce5
 8003d3c:	08003e99 	.word	0x08003e99
 8003d40:	08003ce5 	.word	0x08003ce5
 8003d44:	08003d99 	.word	0x08003d99
 8003d48:	08003ce5 	.word	0x08003ce5
 8003d4c:	08003ce5 	.word	0x08003ce5
 8003d50:	08003e61 	.word	0x08003e61
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0a4      	b.n	8003eb2 <_printf_i+0x1f6>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	6829      	ldr	r1, [r5, #0]
 8003d6c:	0606      	lsls	r6, r0, #24
 8003d6e:	f101 0304 	add.w	r3, r1, #4
 8003d72:	d50a      	bpl.n	8003d8a <_printf_i+0xce>
 8003d74:	680e      	ldr	r6, [r1, #0]
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	da03      	bge.n	8003d84 <_printf_i+0xc8>
 8003d7c:	232d      	movs	r3, #45	; 0x2d
 8003d7e:	4276      	negs	r6, r6
 8003d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d84:	230a      	movs	r3, #10
 8003d86:	485e      	ldr	r0, [pc, #376]	; (8003f00 <_printf_i+0x244>)
 8003d88:	e019      	b.n	8003dbe <_printf_i+0x102>
 8003d8a:	680e      	ldr	r6, [r1, #0]
 8003d8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d90:	602b      	str	r3, [r5, #0]
 8003d92:	bf18      	it	ne
 8003d94:	b236      	sxthne	r6, r6
 8003d96:	e7ef      	b.n	8003d78 <_printf_i+0xbc>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	6820      	ldr	r0, [r4, #0]
 8003d9c:	1d19      	adds	r1, r3, #4
 8003d9e:	6029      	str	r1, [r5, #0]
 8003da0:	0601      	lsls	r1, r0, #24
 8003da2:	d501      	bpl.n	8003da8 <_printf_i+0xec>
 8003da4:	681e      	ldr	r6, [r3, #0]
 8003da6:	e002      	b.n	8003dae <_printf_i+0xf2>
 8003da8:	0646      	lsls	r6, r0, #25
 8003daa:	d5fb      	bpl.n	8003da4 <_printf_i+0xe8>
 8003dac:	881e      	ldrh	r6, [r3, #0]
 8003dae:	2f6f      	cmp	r7, #111	; 0x6f
 8003db0:	bf0c      	ite	eq
 8003db2:	2308      	moveq	r3, #8
 8003db4:	230a      	movne	r3, #10
 8003db6:	4852      	ldr	r0, [pc, #328]	; (8003f00 <_printf_i+0x244>)
 8003db8:	2100      	movs	r1, #0
 8003dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dbe:	6865      	ldr	r5, [r4, #4]
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	bfa8      	it	ge
 8003dc4:	6821      	ldrge	r1, [r4, #0]
 8003dc6:	60a5      	str	r5, [r4, #8]
 8003dc8:	bfa4      	itt	ge
 8003dca:	f021 0104 	bicge.w	r1, r1, #4
 8003dce:	6021      	strge	r1, [r4, #0]
 8003dd0:	b90e      	cbnz	r6, 8003dd6 <_printf_i+0x11a>
 8003dd2:	2d00      	cmp	r5, #0
 8003dd4:	d04d      	beq.n	8003e72 <_printf_i+0x1b6>
 8003dd6:	4615      	mov	r5, r2
 8003dd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ddc:	fb03 6711 	mls	r7, r3, r1, r6
 8003de0:	5dc7      	ldrb	r7, [r0, r7]
 8003de2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003de6:	4637      	mov	r7, r6
 8003de8:	42bb      	cmp	r3, r7
 8003dea:	460e      	mov	r6, r1
 8003dec:	d9f4      	bls.n	8003dd8 <_printf_i+0x11c>
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d10b      	bne.n	8003e0a <_printf_i+0x14e>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	07de      	lsls	r6, r3, #31
 8003df6:	d508      	bpl.n	8003e0a <_printf_i+0x14e>
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	6861      	ldr	r1, [r4, #4]
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	bfde      	ittt	le
 8003e00:	2330      	movle	r3, #48	; 0x30
 8003e02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e0a:	1b52      	subs	r2, r2, r5
 8003e0c:	6122      	str	r2, [r4, #16]
 8003e0e:	464b      	mov	r3, r9
 8003e10:	4621      	mov	r1, r4
 8003e12:	4640      	mov	r0, r8
 8003e14:	f8cd a000 	str.w	sl, [sp]
 8003e18:	aa03      	add	r2, sp, #12
 8003e1a:	f7ff fedf 	bl	8003bdc <_printf_common>
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d14c      	bne.n	8003ebc <_printf_i+0x200>
 8003e22:	f04f 30ff 	mov.w	r0, #4294967295
 8003e26:	b004      	add	sp, #16
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	4834      	ldr	r0, [pc, #208]	; (8003f00 <_printf_i+0x244>)
 8003e2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e32:	6829      	ldr	r1, [r5, #0]
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e3a:	6029      	str	r1, [r5, #0]
 8003e3c:	061d      	lsls	r5, r3, #24
 8003e3e:	d514      	bpl.n	8003e6a <_printf_i+0x1ae>
 8003e40:	07df      	lsls	r7, r3, #31
 8003e42:	bf44      	itt	mi
 8003e44:	f043 0320 	orrmi.w	r3, r3, #32
 8003e48:	6023      	strmi	r3, [r4, #0]
 8003e4a:	b91e      	cbnz	r6, 8003e54 <_printf_i+0x198>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
 8003e52:	6023      	str	r3, [r4, #0]
 8003e54:	2310      	movs	r3, #16
 8003e56:	e7af      	b.n	8003db8 <_printf_i+0xfc>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f043 0320 	orr.w	r3, r3, #32
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	2378      	movs	r3, #120	; 0x78
 8003e62:	4828      	ldr	r0, [pc, #160]	; (8003f04 <_printf_i+0x248>)
 8003e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e68:	e7e3      	b.n	8003e32 <_printf_i+0x176>
 8003e6a:	0659      	lsls	r1, r3, #25
 8003e6c:	bf48      	it	mi
 8003e6e:	b2b6      	uxthmi	r6, r6
 8003e70:	e7e6      	b.n	8003e40 <_printf_i+0x184>
 8003e72:	4615      	mov	r5, r2
 8003e74:	e7bb      	b.n	8003dee <_printf_i+0x132>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	6826      	ldr	r6, [r4, #0]
 8003e7a:	1d18      	adds	r0, r3, #4
 8003e7c:	6961      	ldr	r1, [r4, #20]
 8003e7e:	6028      	str	r0, [r5, #0]
 8003e80:	0635      	lsls	r5, r6, #24
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	d501      	bpl.n	8003e8a <_printf_i+0x1ce>
 8003e86:	6019      	str	r1, [r3, #0]
 8003e88:	e002      	b.n	8003e90 <_printf_i+0x1d4>
 8003e8a:	0670      	lsls	r0, r6, #25
 8003e8c:	d5fb      	bpl.n	8003e86 <_printf_i+0x1ca>
 8003e8e:	8019      	strh	r1, [r3, #0]
 8003e90:	2300      	movs	r3, #0
 8003e92:	4615      	mov	r5, r2
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	e7ba      	b.n	8003e0e <_printf_i+0x152>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	602a      	str	r2, [r5, #0]
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	6862      	ldr	r2, [r4, #4]
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 fa9b 	bl	80043e0 <memchr>
 8003eaa:	b108      	cbz	r0, 8003eb0 <_printf_i+0x1f4>
 8003eac:	1b40      	subs	r0, r0, r5
 8003eae:	6060      	str	r0, [r4, #4]
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eba:	e7a8      	b.n	8003e0e <_printf_i+0x152>
 8003ebc:	462a      	mov	r2, r5
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4640      	mov	r0, r8
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	47d0      	blx	sl
 8003ec6:	3001      	adds	r0, #1
 8003ec8:	d0ab      	beq.n	8003e22 <_printf_i+0x166>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	079b      	lsls	r3, r3, #30
 8003ece:	d413      	bmi.n	8003ef8 <_printf_i+0x23c>
 8003ed0:	68e0      	ldr	r0, [r4, #12]
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	4298      	cmp	r0, r3
 8003ed6:	bfb8      	it	lt
 8003ed8:	4618      	movlt	r0, r3
 8003eda:	e7a4      	b.n	8003e26 <_printf_i+0x16a>
 8003edc:	2301      	movs	r3, #1
 8003ede:	4632      	mov	r2, r6
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4640      	mov	r0, r8
 8003ee4:	47d0      	blx	sl
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	d09b      	beq.n	8003e22 <_printf_i+0x166>
 8003eea:	3501      	adds	r5, #1
 8003eec:	68e3      	ldr	r3, [r4, #12]
 8003eee:	9903      	ldr	r1, [sp, #12]
 8003ef0:	1a5b      	subs	r3, r3, r1
 8003ef2:	42ab      	cmp	r3, r5
 8003ef4:	dcf2      	bgt.n	8003edc <_printf_i+0x220>
 8003ef6:	e7eb      	b.n	8003ed0 <_printf_i+0x214>
 8003ef8:	2500      	movs	r5, #0
 8003efa:	f104 0619 	add.w	r6, r4, #25
 8003efe:	e7f5      	b.n	8003eec <_printf_i+0x230>
 8003f00:	08004609 	.word	0x08004609
 8003f04:	0800461a 	.word	0x0800461a

08003f08 <_sbrk_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	4d05      	ldr	r5, [pc, #20]	; (8003f24 <_sbrk_r+0x1c>)
 8003f0e:	4604      	mov	r4, r0
 8003f10:	4608      	mov	r0, r1
 8003f12:	602b      	str	r3, [r5, #0]
 8003f14:	f7fc fd96 	bl	8000a44 <_sbrk>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_sbrk_r+0x1a>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_sbrk_r+0x1a>
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	20000180 	.word	0x20000180

08003f28 <__sread>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	f000 fab8 	bl	80044a4 <_read_r>
 8003f34:	2800      	cmp	r0, #0
 8003f36:	bfab      	itete	ge
 8003f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f3c:	181b      	addge	r3, r3, r0
 8003f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f42:	bfac      	ite	ge
 8003f44:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f46:	81a3      	strhlt	r3, [r4, #12]
 8003f48:	bd10      	pop	{r4, pc}

08003f4a <__swrite>:
 8003f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4e:	461f      	mov	r7, r3
 8003f50:	898b      	ldrh	r3, [r1, #12]
 8003f52:	4605      	mov	r5, r0
 8003f54:	05db      	lsls	r3, r3, #23
 8003f56:	460c      	mov	r4, r1
 8003f58:	4616      	mov	r6, r2
 8003f5a:	d505      	bpl.n	8003f68 <__swrite+0x1e>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f64:	f000 f9c4 	bl	80042f0 <_lseek_r>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	4628      	mov	r0, r5
 8003f74:	463b      	mov	r3, r7
 8003f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7e:	f000 b869 	b.w	8004054 <_write_r>

08003f82 <__sseek>:
 8003f82:	b510      	push	{r4, lr}
 8003f84:	460c      	mov	r4, r1
 8003f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8a:	f000 f9b1 	bl	80042f0 <_lseek_r>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	bf15      	itete	ne
 8003f94:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f9e:	81a3      	strheq	r3, [r4, #12]
 8003fa0:	bf18      	it	ne
 8003fa2:	81a3      	strhne	r3, [r4, #12]
 8003fa4:	bd10      	pop	{r4, pc}

08003fa6 <__sclose>:
 8003fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003faa:	f000 b8d3 	b.w	8004154 <_close_r>
	...

08003fb0 <__swbuf_r>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	460e      	mov	r6, r1
 8003fb4:	4614      	mov	r4, r2
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	b118      	cbz	r0, 8003fc2 <__swbuf_r+0x12>
 8003fba:	6983      	ldr	r3, [r0, #24]
 8003fbc:	b90b      	cbnz	r3, 8003fc2 <__swbuf_r+0x12>
 8003fbe:	f7ff fb81 	bl	80036c4 <__sinit>
 8003fc2:	4b21      	ldr	r3, [pc, #132]	; (8004048 <__swbuf_r+0x98>)
 8003fc4:	429c      	cmp	r4, r3
 8003fc6:	d12b      	bne.n	8004020 <__swbuf_r+0x70>
 8003fc8:	686c      	ldr	r4, [r5, #4]
 8003fca:	69a3      	ldr	r3, [r4, #24]
 8003fcc:	60a3      	str	r3, [r4, #8]
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	071a      	lsls	r2, r3, #28
 8003fd2:	d52f      	bpl.n	8004034 <__swbuf_r+0x84>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	b36b      	cbz	r3, 8004034 <__swbuf_r+0x84>
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	b2f6      	uxtb	r6, r6
 8003fde:	1ac0      	subs	r0, r0, r3
 8003fe0:	6963      	ldr	r3, [r4, #20]
 8003fe2:	4637      	mov	r7, r6
 8003fe4:	4283      	cmp	r3, r0
 8003fe6:	dc04      	bgt.n	8003ff2 <__swbuf_r+0x42>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f944 	bl	8004278 <_fflush_r>
 8003ff0:	bb30      	cbnz	r0, 8004040 <__swbuf_r+0x90>
 8003ff2:	68a3      	ldr	r3, [r4, #8]
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	60a3      	str	r3, [r4, #8]
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	6022      	str	r2, [r4, #0]
 8004000:	701e      	strb	r6, [r3, #0]
 8004002:	6963      	ldr	r3, [r4, #20]
 8004004:	4283      	cmp	r3, r0
 8004006:	d004      	beq.n	8004012 <__swbuf_r+0x62>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	07db      	lsls	r3, r3, #31
 800400c:	d506      	bpl.n	800401c <__swbuf_r+0x6c>
 800400e:	2e0a      	cmp	r6, #10
 8004010:	d104      	bne.n	800401c <__swbuf_r+0x6c>
 8004012:	4621      	mov	r1, r4
 8004014:	4628      	mov	r0, r5
 8004016:	f000 f92f 	bl	8004278 <_fflush_r>
 800401a:	b988      	cbnz	r0, 8004040 <__swbuf_r+0x90>
 800401c:	4638      	mov	r0, r7
 800401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004020:	4b0a      	ldr	r3, [pc, #40]	; (800404c <__swbuf_r+0x9c>)
 8004022:	429c      	cmp	r4, r3
 8004024:	d101      	bne.n	800402a <__swbuf_r+0x7a>
 8004026:	68ac      	ldr	r4, [r5, #8]
 8004028:	e7cf      	b.n	8003fca <__swbuf_r+0x1a>
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <__swbuf_r+0xa0>)
 800402c:	429c      	cmp	r4, r3
 800402e:	bf08      	it	eq
 8004030:	68ec      	ldreq	r4, [r5, #12]
 8004032:	e7ca      	b.n	8003fca <__swbuf_r+0x1a>
 8004034:	4621      	mov	r1, r4
 8004036:	4628      	mov	r0, r5
 8004038:	f000 f81e 	bl	8004078 <__swsetup_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	d0cb      	beq.n	8003fd8 <__swbuf_r+0x28>
 8004040:	f04f 37ff 	mov.w	r7, #4294967295
 8004044:	e7ea      	b.n	800401c <__swbuf_r+0x6c>
 8004046:	bf00      	nop
 8004048:	080045b8 	.word	0x080045b8
 800404c:	080045d8 	.word	0x080045d8
 8004050:	08004598 	.word	0x08004598

08004054 <_write_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	2200      	movs	r2, #0
 800405e:	4d05      	ldr	r5, [pc, #20]	; (8004074 <_write_r+0x20>)
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fc faf6 	bl	8000654 <_write>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_write_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_write_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	20000180 	.word	0x20000180

08004078 <__swsetup_r>:
 8004078:	4b32      	ldr	r3, [pc, #200]	; (8004144 <__swsetup_r+0xcc>)
 800407a:	b570      	push	{r4, r5, r6, lr}
 800407c:	681d      	ldr	r5, [r3, #0]
 800407e:	4606      	mov	r6, r0
 8004080:	460c      	mov	r4, r1
 8004082:	b125      	cbz	r5, 800408e <__swsetup_r+0x16>
 8004084:	69ab      	ldr	r3, [r5, #24]
 8004086:	b913      	cbnz	r3, 800408e <__swsetup_r+0x16>
 8004088:	4628      	mov	r0, r5
 800408a:	f7ff fb1b 	bl	80036c4 <__sinit>
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <__swsetup_r+0xd0>)
 8004090:	429c      	cmp	r4, r3
 8004092:	d10f      	bne.n	80040b4 <__swsetup_r+0x3c>
 8004094:	686c      	ldr	r4, [r5, #4]
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800409c:	0719      	lsls	r1, r3, #28
 800409e:	d42c      	bmi.n	80040fa <__swsetup_r+0x82>
 80040a0:	06dd      	lsls	r5, r3, #27
 80040a2:	d411      	bmi.n	80040c8 <__swsetup_r+0x50>
 80040a4:	2309      	movs	r3, #9
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	e03e      	b.n	8004132 <__swsetup_r+0xba>
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <__swsetup_r+0xd4>)
 80040b6:	429c      	cmp	r4, r3
 80040b8:	d101      	bne.n	80040be <__swsetup_r+0x46>
 80040ba:	68ac      	ldr	r4, [r5, #8]
 80040bc:	e7eb      	b.n	8004096 <__swsetup_r+0x1e>
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <__swsetup_r+0xd8>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	bf08      	it	eq
 80040c4:	68ec      	ldreq	r4, [r5, #12]
 80040c6:	e7e6      	b.n	8004096 <__swsetup_r+0x1e>
 80040c8:	0758      	lsls	r0, r3, #29
 80040ca:	d512      	bpl.n	80040f2 <__swsetup_r+0x7a>
 80040cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ce:	b141      	cbz	r1, 80040e2 <__swsetup_r+0x6a>
 80040d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d4:	4299      	cmp	r1, r3
 80040d6:	d002      	beq.n	80040de <__swsetup_r+0x66>
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f99b 	bl	8004414 <_free_r>
 80040de:	2300      	movs	r3, #0
 80040e0:	6363      	str	r3, [r4, #52]	; 0x34
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	6923      	ldr	r3, [r4, #16]
 80040f0:	6023      	str	r3, [r4, #0]
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	f043 0308 	orr.w	r3, r3, #8
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	b94b      	cbnz	r3, 8004112 <__swsetup_r+0x9a>
 80040fe:	89a3      	ldrh	r3, [r4, #12]
 8004100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004108:	d003      	beq.n	8004112 <__swsetup_r+0x9a>
 800410a:	4621      	mov	r1, r4
 800410c:	4630      	mov	r0, r6
 800410e:	f000 f927 	bl	8004360 <__smakebuf_r>
 8004112:	89a0      	ldrh	r0, [r4, #12]
 8004114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004118:	f010 0301 	ands.w	r3, r0, #1
 800411c:	d00a      	beq.n	8004134 <__swsetup_r+0xbc>
 800411e:	2300      	movs	r3, #0
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	425b      	negs	r3, r3
 8004126:	61a3      	str	r3, [r4, #24]
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	b943      	cbnz	r3, 800413e <__swsetup_r+0xc6>
 800412c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004130:	d1ba      	bne.n	80040a8 <__swsetup_r+0x30>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	0781      	lsls	r1, r0, #30
 8004136:	bf58      	it	pl
 8004138:	6963      	ldrpl	r3, [r4, #20]
 800413a:	60a3      	str	r3, [r4, #8]
 800413c:	e7f4      	b.n	8004128 <__swsetup_r+0xb0>
 800413e:	2000      	movs	r0, #0
 8004140:	e7f7      	b.n	8004132 <__swsetup_r+0xba>
 8004142:	bf00      	nop
 8004144:	2000000c 	.word	0x2000000c
 8004148:	080045b8 	.word	0x080045b8
 800414c:	080045d8 	.word	0x080045d8
 8004150:	08004598 	.word	0x08004598

08004154 <_close_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	2300      	movs	r3, #0
 8004158:	4d05      	ldr	r5, [pc, #20]	; (8004170 <_close_r+0x1c>)
 800415a:	4604      	mov	r4, r0
 800415c:	4608      	mov	r0, r1
 800415e:	602b      	str	r3, [r5, #0]
 8004160:	f7fc fc3f 	bl	80009e2 <_close>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_close_r+0x1a>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_close_r+0x1a>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	20000180 	.word	0x20000180

08004174 <__sflush_r>:
 8004174:	898a      	ldrh	r2, [r1, #12]
 8004176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004178:	4605      	mov	r5, r0
 800417a:	0710      	lsls	r0, r2, #28
 800417c:	460c      	mov	r4, r1
 800417e:	d457      	bmi.n	8004230 <__sflush_r+0xbc>
 8004180:	684b      	ldr	r3, [r1, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	dc04      	bgt.n	8004190 <__sflush_r+0x1c>
 8004186:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	dc01      	bgt.n	8004190 <__sflush_r+0x1c>
 800418c:	2000      	movs	r0, #0
 800418e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004190:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004192:	2e00      	cmp	r6, #0
 8004194:	d0fa      	beq.n	800418c <__sflush_r+0x18>
 8004196:	2300      	movs	r3, #0
 8004198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800419c:	682f      	ldr	r7, [r5, #0]
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	d032      	beq.n	8004208 <__sflush_r+0x94>
 80041a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	075a      	lsls	r2, r3, #29
 80041a8:	d505      	bpl.n	80041b6 <__sflush_r+0x42>
 80041aa:	6863      	ldr	r3, [r4, #4]
 80041ac:	1ac0      	subs	r0, r0, r3
 80041ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041b0:	b10b      	cbz	r3, 80041b6 <__sflush_r+0x42>
 80041b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041b4:	1ac0      	subs	r0, r0, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	4602      	mov	r2, r0
 80041ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041bc:	4628      	mov	r0, r5
 80041be:	6a21      	ldr	r1, [r4, #32]
 80041c0:	47b0      	blx	r6
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	89a3      	ldrh	r3, [r4, #12]
 80041c6:	d106      	bne.n	80041d6 <__sflush_r+0x62>
 80041c8:	6829      	ldr	r1, [r5, #0]
 80041ca:	291d      	cmp	r1, #29
 80041cc:	d82c      	bhi.n	8004228 <__sflush_r+0xb4>
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <__sflush_r+0x100>)
 80041d0:	40ca      	lsrs	r2, r1
 80041d2:	07d6      	lsls	r6, r2, #31
 80041d4:	d528      	bpl.n	8004228 <__sflush_r+0xb4>
 80041d6:	2200      	movs	r2, #0
 80041d8:	6062      	str	r2, [r4, #4]
 80041da:	6922      	ldr	r2, [r4, #16]
 80041dc:	04d9      	lsls	r1, r3, #19
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	d504      	bpl.n	80041ec <__sflush_r+0x78>
 80041e2:	1c42      	adds	r2, r0, #1
 80041e4:	d101      	bne.n	80041ea <__sflush_r+0x76>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	b903      	cbnz	r3, 80041ec <__sflush_r+0x78>
 80041ea:	6560      	str	r0, [r4, #84]	; 0x54
 80041ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ee:	602f      	str	r7, [r5, #0]
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d0cb      	beq.n	800418c <__sflush_r+0x18>
 80041f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041f8:	4299      	cmp	r1, r3
 80041fa:	d002      	beq.n	8004202 <__sflush_r+0x8e>
 80041fc:	4628      	mov	r0, r5
 80041fe:	f000 f909 	bl	8004414 <_free_r>
 8004202:	2000      	movs	r0, #0
 8004204:	6360      	str	r0, [r4, #52]	; 0x34
 8004206:	e7c2      	b.n	800418e <__sflush_r+0x1a>
 8004208:	6a21      	ldr	r1, [r4, #32]
 800420a:	2301      	movs	r3, #1
 800420c:	4628      	mov	r0, r5
 800420e:	47b0      	blx	r6
 8004210:	1c41      	adds	r1, r0, #1
 8004212:	d1c7      	bne.n	80041a4 <__sflush_r+0x30>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0c4      	beq.n	80041a4 <__sflush_r+0x30>
 800421a:	2b1d      	cmp	r3, #29
 800421c:	d001      	beq.n	8004222 <__sflush_r+0xae>
 800421e:	2b16      	cmp	r3, #22
 8004220:	d101      	bne.n	8004226 <__sflush_r+0xb2>
 8004222:	602f      	str	r7, [r5, #0]
 8004224:	e7b2      	b.n	800418c <__sflush_r+0x18>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	e7ae      	b.n	800418e <__sflush_r+0x1a>
 8004230:	690f      	ldr	r7, [r1, #16]
 8004232:	2f00      	cmp	r7, #0
 8004234:	d0aa      	beq.n	800418c <__sflush_r+0x18>
 8004236:	0793      	lsls	r3, r2, #30
 8004238:	bf18      	it	ne
 800423a:	2300      	movne	r3, #0
 800423c:	680e      	ldr	r6, [r1, #0]
 800423e:	bf08      	it	eq
 8004240:	694b      	ldreq	r3, [r1, #20]
 8004242:	1bf6      	subs	r6, r6, r7
 8004244:	600f      	str	r7, [r1, #0]
 8004246:	608b      	str	r3, [r1, #8]
 8004248:	2e00      	cmp	r6, #0
 800424a:	dd9f      	ble.n	800418c <__sflush_r+0x18>
 800424c:	4633      	mov	r3, r6
 800424e:	463a      	mov	r2, r7
 8004250:	4628      	mov	r0, r5
 8004252:	6a21      	ldr	r1, [r4, #32]
 8004254:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004258:	47e0      	blx	ip
 800425a:	2800      	cmp	r0, #0
 800425c:	dc06      	bgt.n	800426c <__sflush_r+0xf8>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	e790      	b.n	800418e <__sflush_r+0x1a>
 800426c:	4407      	add	r7, r0
 800426e:	1a36      	subs	r6, r6, r0
 8004270:	e7ea      	b.n	8004248 <__sflush_r+0xd4>
 8004272:	bf00      	nop
 8004274:	20400001 	.word	0x20400001

08004278 <_fflush_r>:
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	690b      	ldr	r3, [r1, #16]
 800427c:	4605      	mov	r5, r0
 800427e:	460c      	mov	r4, r1
 8004280:	b913      	cbnz	r3, 8004288 <_fflush_r+0x10>
 8004282:	2500      	movs	r5, #0
 8004284:	4628      	mov	r0, r5
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	b118      	cbz	r0, 8004292 <_fflush_r+0x1a>
 800428a:	6983      	ldr	r3, [r0, #24]
 800428c:	b90b      	cbnz	r3, 8004292 <_fflush_r+0x1a>
 800428e:	f7ff fa19 	bl	80036c4 <__sinit>
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <_fflush_r+0x6c>)
 8004294:	429c      	cmp	r4, r3
 8004296:	d11b      	bne.n	80042d0 <_fflush_r+0x58>
 8004298:	686c      	ldr	r4, [r5, #4]
 800429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ef      	beq.n	8004282 <_fflush_r+0xa>
 80042a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042a4:	07d0      	lsls	r0, r2, #31
 80042a6:	d404      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042a8:	0599      	lsls	r1, r3, #22
 80042aa:	d402      	bmi.n	80042b2 <_fflush_r+0x3a>
 80042ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ae:	f7ff faa7 	bl	8003800 <__retarget_lock_acquire_recursive>
 80042b2:	4628      	mov	r0, r5
 80042b4:	4621      	mov	r1, r4
 80042b6:	f7ff ff5d 	bl	8004174 <__sflush_r>
 80042ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042bc:	4605      	mov	r5, r0
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d4e0      	bmi.n	8004284 <_fflush_r+0xc>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d4dd      	bmi.n	8004284 <_fflush_r+0xc>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f7ff fa9a 	bl	8003802 <__retarget_lock_release_recursive>
 80042ce:	e7d9      	b.n	8004284 <_fflush_r+0xc>
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <_fflush_r+0x70>)
 80042d2:	429c      	cmp	r4, r3
 80042d4:	d101      	bne.n	80042da <_fflush_r+0x62>
 80042d6:	68ac      	ldr	r4, [r5, #8]
 80042d8:	e7df      	b.n	800429a <_fflush_r+0x22>
 80042da:	4b04      	ldr	r3, [pc, #16]	; (80042ec <_fflush_r+0x74>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	bf08      	it	eq
 80042e0:	68ec      	ldreq	r4, [r5, #12]
 80042e2:	e7da      	b.n	800429a <_fflush_r+0x22>
 80042e4:	080045b8 	.word	0x080045b8
 80042e8:	080045d8 	.word	0x080045d8
 80042ec:	08004598 	.word	0x08004598

080042f0 <_lseek_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4604      	mov	r4, r0
 80042f4:	4608      	mov	r0, r1
 80042f6:	4611      	mov	r1, r2
 80042f8:	2200      	movs	r2, #0
 80042fa:	4d05      	ldr	r5, [pc, #20]	; (8004310 <_lseek_r+0x20>)
 80042fc:	602a      	str	r2, [r5, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	f7fc fb93 	bl	8000a2a <_lseek>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_lseek_r+0x1e>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	b103      	cbz	r3, 800430e <_lseek_r+0x1e>
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	20000180 	.word	0x20000180

08004314 <__swhatbuf_r>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	460e      	mov	r6, r1
 8004318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431c:	4614      	mov	r4, r2
 800431e:	2900      	cmp	r1, #0
 8004320:	461d      	mov	r5, r3
 8004322:	b096      	sub	sp, #88	; 0x58
 8004324:	da08      	bge.n	8004338 <__swhatbuf_r+0x24>
 8004326:	2200      	movs	r2, #0
 8004328:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800432c:	602a      	str	r2, [r5, #0]
 800432e:	061a      	lsls	r2, r3, #24
 8004330:	d410      	bmi.n	8004354 <__swhatbuf_r+0x40>
 8004332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004336:	e00e      	b.n	8004356 <__swhatbuf_r+0x42>
 8004338:	466a      	mov	r2, sp
 800433a:	f000 f8c5 	bl	80044c8 <_fstat_r>
 800433e:	2800      	cmp	r0, #0
 8004340:	dbf1      	blt.n	8004326 <__swhatbuf_r+0x12>
 8004342:	9a01      	ldr	r2, [sp, #4]
 8004344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800434c:	425a      	negs	r2, r3
 800434e:	415a      	adcs	r2, r3
 8004350:	602a      	str	r2, [r5, #0]
 8004352:	e7ee      	b.n	8004332 <__swhatbuf_r+0x1e>
 8004354:	2340      	movs	r3, #64	; 0x40
 8004356:	2000      	movs	r0, #0
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	b016      	add	sp, #88	; 0x58
 800435c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004360 <__smakebuf_r>:
 8004360:	898b      	ldrh	r3, [r1, #12]
 8004362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004364:	079d      	lsls	r5, r3, #30
 8004366:	4606      	mov	r6, r0
 8004368:	460c      	mov	r4, r1
 800436a:	d507      	bpl.n	800437c <__smakebuf_r+0x1c>
 800436c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	6123      	str	r3, [r4, #16]
 8004374:	2301      	movs	r3, #1
 8004376:	6163      	str	r3, [r4, #20]
 8004378:	b002      	add	sp, #8
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	466a      	mov	r2, sp
 800437e:	ab01      	add	r3, sp, #4
 8004380:	f7ff ffc8 	bl	8004314 <__swhatbuf_r>
 8004384:	9900      	ldr	r1, [sp, #0]
 8004386:	4605      	mov	r5, r0
 8004388:	4630      	mov	r0, r6
 800438a:	f7ff fa5b 	bl	8003844 <_malloc_r>
 800438e:	b948      	cbnz	r0, 80043a4 <__smakebuf_r+0x44>
 8004390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004394:	059a      	lsls	r2, r3, #22
 8004396:	d4ef      	bmi.n	8004378 <__smakebuf_r+0x18>
 8004398:	f023 0303 	bic.w	r3, r3, #3
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	81a3      	strh	r3, [r4, #12]
 80043a2:	e7e3      	b.n	800436c <__smakebuf_r+0xc>
 80043a4:	4b0d      	ldr	r3, [pc, #52]	; (80043dc <__smakebuf_r+0x7c>)
 80043a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043a8:	89a3      	ldrh	r3, [r4, #12]
 80043aa:	6020      	str	r0, [r4, #0]
 80043ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	9b00      	ldr	r3, [sp, #0]
 80043b4:	6120      	str	r0, [r4, #16]
 80043b6:	6163      	str	r3, [r4, #20]
 80043b8:	9b01      	ldr	r3, [sp, #4]
 80043ba:	b15b      	cbz	r3, 80043d4 <__smakebuf_r+0x74>
 80043bc:	4630      	mov	r0, r6
 80043be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043c2:	f000 f893 	bl	80044ec <_isatty_r>
 80043c6:	b128      	cbz	r0, 80043d4 <__smakebuf_r+0x74>
 80043c8:	89a3      	ldrh	r3, [r4, #12]
 80043ca:	f023 0303 	bic.w	r3, r3, #3
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	81a3      	strh	r3, [r4, #12]
 80043d4:	89a0      	ldrh	r0, [r4, #12]
 80043d6:	4305      	orrs	r5, r0
 80043d8:	81a5      	strh	r5, [r4, #12]
 80043da:	e7cd      	b.n	8004378 <__smakebuf_r+0x18>
 80043dc:	0800365d 	.word	0x0800365d

080043e0 <memchr>:
 80043e0:	4603      	mov	r3, r0
 80043e2:	b510      	push	{r4, lr}
 80043e4:	b2c9      	uxtb	r1, r1
 80043e6:	4402      	add	r2, r0
 80043e8:	4293      	cmp	r3, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	d101      	bne.n	80043f2 <memchr+0x12>
 80043ee:	2000      	movs	r0, #0
 80043f0:	e003      	b.n	80043fa <memchr+0x1a>
 80043f2:	7804      	ldrb	r4, [r0, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	428c      	cmp	r4, r1
 80043f8:	d1f6      	bne.n	80043e8 <memchr+0x8>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <__malloc_lock>:
 80043fc:	4801      	ldr	r0, [pc, #4]	; (8004404 <__malloc_lock+0x8>)
 80043fe:	f7ff b9ff 	b.w	8003800 <__retarget_lock_acquire_recursive>
 8004402:	bf00      	nop
 8004404:	20000174 	.word	0x20000174

08004408 <__malloc_unlock>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__malloc_unlock+0x8>)
 800440a:	f7ff b9fa 	b.w	8003802 <__retarget_lock_release_recursive>
 800440e:	bf00      	nop
 8004410:	20000174 	.word	0x20000174

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d040      	beq.n	800449e <_free_r+0x8a>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f7ff ffe8 	bl	80043fc <__malloc_lock>
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <_free_r+0x8c>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x2c>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443c:	f7ff bfe4 	b.w	8004408 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x42>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x1e>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x4c>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x42>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1850      	adds	r0, r2, r1
 8004464:	42a0      	cmp	r0, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x6c>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	4401      	add	r1, r0
 800446c:	1850      	adds	r0, r2, r1
 800446e:	4283      	cmp	r3, r0
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x22>
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4401      	add	r1, r0
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	6053      	str	r3, [r2, #4]
 800447e:	e7da      	b.n	8004436 <_free_r+0x22>
 8004480:	d902      	bls.n	8004488 <_free_r+0x74>
 8004482:	230c      	movs	r3, #12
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x22>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf01      	itttt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	1809      	addeq	r1, r1, r0
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	6063      	str	r3, [r4, #4]
 800449a:	6054      	str	r4, [r2, #4]
 800449c:	e7cb      	b.n	8004436 <_free_r+0x22>
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	20000178 	.word	0x20000178

080044a4 <_read_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	2200      	movs	r2, #0
 80044ae:	4d05      	ldr	r5, [pc, #20]	; (80044c4 <_read_r+0x20>)
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fc fa78 	bl	80009a8 <_read>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_read_r+0x1e>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_read_r+0x1e>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	20000180 	.word	0x20000180

080044c8 <_fstat_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	2300      	movs	r3, #0
 80044cc:	4d06      	ldr	r5, [pc, #24]	; (80044e8 <_fstat_r+0x20>)
 80044ce:	4604      	mov	r4, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	602b      	str	r3, [r5, #0]
 80044d6:	f7fc fa8f 	bl	80009f8 <_fstat>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d102      	bne.n	80044e4 <_fstat_r+0x1c>
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	b103      	cbz	r3, 80044e4 <_fstat_r+0x1c>
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	bd38      	pop	{r3, r4, r5, pc}
 80044e6:	bf00      	nop
 80044e8:	20000180 	.word	0x20000180

080044ec <_isatty_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	2300      	movs	r3, #0
 80044f0:	4d05      	ldr	r5, [pc, #20]	; (8004508 <_isatty_r+0x1c>)
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	f7fc fa8d 	bl	8000a16 <_isatty>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_isatty_r+0x1a>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_isatty_r+0x1a>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	20000180 	.word	0x20000180

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
